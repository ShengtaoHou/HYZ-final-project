// 
// Decompiled by Procyon v0.5.36
// 

package org.apache.activemq.leveldb;

import scala.Serializable;
import org.fusesource.leveldbjni.internal.JniDB;
import org.iq80.leveldb.Snapshot;
import scala.reflect.ClassTag$;
import org.iq80.leveldb.Range;
import org.iq80.leveldb.DB;
import scala.collection.mutable.HashMap$;
import java.io.OutputStream;
import java.io.ObjectOutputStream;
import org.fusesource.hawtbuf.ByteArrayOutputStream;
import org.apache.activemq.broker.SuppressReplyException;
import scala.runtime.Nothing$;
import org.iq80.leveldb.DBIterator;
import scala.runtime.RichLong$;
import scala.collection.GenTraversableOnce;
import scala.collection.JavaConversions$;
import scala.collection.immutable.Set;
import scala.runtime.LongRef;
import scala.runtime.BooleanRef;
import org.apache.activemq.util.ByteSequence;
import scala.MatchError;
import scala.Function2;
import org.apache.activemq.command.Message;
import scala.runtime.IntRef;
import org.iq80.leveldb.ReadOptions;
import org.fusesource.hawtbuf.DataByteArrayInputStream;
import scala.collection.immutable.Nil$;
import scala.collection.mutable.ListBuffer$;
import scala.collection.mutable.ListBuffer;
import scala.Some;
import scala.runtime.BoxesRunTime;
import scala.Option;
import scala.runtime.ObjectRef;
import scala.Predef$;
import org.apache.activemq.util.IOExceptionSupport;
import java.io.IOException;
import scala.Function1;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.concurrent.Executor;
import org.fusesource.hawtdispatch.package$;
import scala.runtime.BoxedUnit;
import org.apache.activemq.leveldb.util.FileSupport$;
import scala.Option$;
import java.util.concurrent.ThreadPoolExecutor;
import org.iq80.leveldb.WriteOptions;
import org.fusesource.hawtbuf.AsciiBuffer;
import org.apache.activemq.leveldb.record.CollectionRecord;
import org.apache.activemq.leveldb.record.CollectionKey;
import org.apache.activemq.leveldb.record.EntryRecord;
import org.apache.activemq.leveldb.record.EntryKey;
import scala.Tuple2;
import org.fusesource.hawtbuf.Buffer;
import scala.Tuple3;
import java.io.File;
import org.slf4j.Logger;
import scala.collection.Seq;
import scala.Function0;
import org.apache.activemq.leveldb.util.TimeMetric;
import org.iq80.leveldb.WriteBatch;
import java.util.concurrent.ExecutorService;
import java.util.TreeMap;
import org.apache.activemq.leveldb.util.LongCounter;
import scala.collection.mutable.HashMap;
import org.iq80.leveldb.DBFactory;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import org.iq80.leveldb.Options;
import org.fusesource.hawtdispatch.DispatchQueue;
import scala.reflect.ScalaSignature;

@ScalaSignature(bytes = "\u0006\u0001%mr!B\u0001\u0003\u0011\u0003Y\u0011!\u0004'fm\u0016dGIQ\"mS\u0016tGO\u0003\u0002\u0004\t\u00059A.\u001a<fY\u0012\u0014'BA\u0003\u0007\u0003!\t7\r^5wK6\f(BA\u0004\t\u0003\u0019\t\u0007/Y2iK*\t\u0011\"A\u0002pe\u001e\u001c\u0001\u0001\u0005\u0002\r\u001b5\t!AB\u0003\u000f\u0005!\u0005qBA\u0007MKZ,G\u000e\u0012\"DY&,g\u000e^\n\u0004\u001bA1\u0002CA\t\u0015\u001b\u0005\u0011\"\"A\n\u0002\u000bM\u001c\u0017\r\\1\n\u0005U\u0011\"AB!osJ+g\r\u0005\u0002\u001855\t\u0001D\u0003\u0002\u001a\u0005\u0005!Q\u000f^5m\u0013\tY\u0002DA\u0002M_\u001eDQ!H\u0007\u0005\u0002y\ta\u0001P5oSRtD#A\u0006\u0007\t\u0001j\u0001!\t\u0002\f/JLG/\u001a+ie\u0016\fGm\u0005\u0002 EA\u00111\u0005K\u0007\u0002I)\u0011QEJ\u0001\u0005Y\u0006twMC\u0001(\u0003\u0011Q\u0017M^1\n\u0005%\"#A\u0002+ie\u0016\fG\r\u0003\u0005,?\t\u0005\t\u0015!\u0003-\u0003\u0005\u0011\bCA\u0012.\u0013\tqCE\u0001\u0005Sk:t\u0017M\u00197f\u0011\u0015ir\u0004\"\u00011)\t\t4\u0007\u0005\u00023?5\tQ\u0002C\u0003,_\u0001\u0007A\u0006C\u00046\u001b\t\u0007IQ\u0001\u001c\u0002'M#vJU#`'\u000eCU)T!`!J+e)\u0013-\u0016\u0003]z\u0011\u0001O\u0011\u0002s\u00059\u0012m\u0019;jm\u0016l\u0017o\u00187fm\u0016dGMY0ti>\u0014XM\u000f\u0005\u0007w5\u0001\u000bQB\u001c\u0002)M#vJU#`'\u000eCU)T!`!J+e)\u0013-!\u0011\u001diTB1A\u0005\u0006y\nAc\u0015+P%\u0016{6k\u0011%F\u001b\u0006{f+\u0012*T\u0013>sU#A \u0010\u0003\u0001k\u0012!\u0001\u0005\u0007\u00056\u0001\u000bQB \u0002+M#vJU#`'\u000eCU)T!`-\u0016\u00136+S(OA!9A)\u0004b\u0001\n\u000b)\u0015A\u0006+I%\u0016\u000bEi\u0018)P\u001f2{6\u000bV!D\u0017~\u001b\u0016JW#\u0016\u0003\u0019\u0003\"!E$\n\u0005!\u0013\"\u0001\u0002'p]\u001eDaAS\u0007!\u0002\u001b1\u0015a\u0006+I%\u0016\u000bEi\u0018)P\u001f2{6\u000bV!D\u0017~\u001b\u0016JW#!\u0011\u001daUB1A\u0005\u00065\u000b1\u0002\u0016%S\u000b\u0006#u\fU(P\u0019V\ta\n\u0005\u0002P'6\t\u0001K\u0003\u0002R%\u0006Q1m\u001c8dkJ\u0014XM\u001c;\u000b\u0005e1\u0013B\u0001+Q\u0005I!\u0006N]3bIB{w\u000e\\#yK\u000e,Ho\u001c:\t\rYk\u0001\u0015!\u0004O\u00031!\u0006JU#B\t~\u0003vj\u0014'!\u0011\u001dAVB1A\u0005\u0002e\u000b1\u0003\u0015'J'R{vKU%U\u000b~{\u0005\u000bV%P\u001dN+\u0012A\u0017\t\u00037~k\u0011\u0001\u0018\u0006\u0003\u0007uS!A\u0018\u0005\u0002\t%\f\b\bM\u0005\u0003Ar\u0013Ab\u0016:ji\u0016|\u0005\u000f^5p]NDaAY\u0007!\u0002\u0013Q\u0016\u0001\u0006)M\u0013N#vl\u0016*J)\u0016{v\n\u0015+J\u001f:\u001b\u0006\u0005C\u0004e\u001b\t\u0007IQA3\u0002\u001f\u0011K%\u000bV-`\u0013:#U\tW0L\u000bf+\u0012A\u001a\t\u0004#\u001dL\u0017B\u00015\u0013\u0005\u0015\t%O]1z!\t\t\".\u0003\u0002l%\t!!)\u001f;f\u0011\u0019iW\u0002)A\u0007M\u0006\u0001B)\u0013*U3~Ke\nR#Y?.+\u0015\f\t\u0005\b_6\u0011\r\u0011\"\u0002f\u0003EaujR0S\u000b\u001a{\u0016J\u0014#F1~[U)\u0017\u0005\u0007c6\u0001\u000bQ\u00024\u0002%1{ui\u0018*F\r~Ke\nR#Y?.+\u0015\f\t\u0005\bg6\u0011\r\u0011\"\u0002f\u00039aujR*`\u0013:#U\tW0L\u000bfCa!^\u0007!\u0002\u001b1\u0017a\u0004'P\u000fN{\u0016J\u0014#F1~[U)\u0017\u0011\t\u000f]l!\u0019!C\u0003K\u00061\u0002KU(E+\u000e+%kX%E'~Ke\nR#Y?.+\u0015\f\u0003\u0004z\u001b\u0001\u0006iAZ\u0001\u0018!J{E)V\"F%~KEiU0J\u001d\u0012+\u0005lX&F3\u0002Bqa_\u0007C\u0002\u0013\u0015Q-A\nD\u001f2cUi\u0011+J\u001f:{V*\u0012+B?.+\u0015\f\u0003\u0004~\u001b\u0001\u0006iAZ\u0001\u0015\u0007>cE*R\"U\u0013>su,T#U\u0003~[U)\u0017\u0011\t\u000f}l!\u0019!C\u0003K\u0006!AKU+F\u0011\u001d\t\u0019!\u0004Q\u0001\u000e\u0019\fQ\u0001\u0016*V\u000b\u0002B\u0001\"a\u0002\u000e\u0005\u0004%)!Z\u0001\u0006\r\u0006c5+\u0012\u0005\b\u0003\u0017i\u0001\u0015!\u0004g\u0003\u00191\u0015\tT*FA!I\u0011qB\u0007C\u0002\u0013\u0015\u0011\u0011C\u0001\r\u0003\u000e[u\fU(T\u0013RKuJT\u000b\u0003\u0003'\u0001B!!\u0006\u0002 5\u0011\u0011q\u0003\u0006\u0005\u00033\tY\"A\u0004iC^$(-\u001e4\u000b\u0007\u0005u\u0001\"\u0001\u0006gkN,7o\\;sG\u0016LA!!\t\u0002\u0018\tY\u0011i]2jS\n+hMZ3s\u0011!\t)#\u0004Q\u0001\u000e\u0005M\u0011!D!D\u0017~\u0003vjU%U\u0013>s\u0005\u0005C\u0005\u0002*5\u0011\r\u0011\"\u0002\u0002,\u0005\t2i\u0014'M\u000b\u000e#\u0016j\u0014(`!J+e)\u0013-\u0016\u0003%Dq!a\f\u000eA\u00035\u0011.\u0001\nD\u001f2cUi\u0011+J\u001f:{\u0006KU#G\u0013b\u0003\u0003\u0002CA\u001a\u001b\t\u0007IQA3\u0002/\r{E\nT#D)&{ej\u0018)S\u000b\u001aK\u0005lX!S%\u0006K\u0006bBA\u001c\u001b\u0001\u0006iAZ\u0001\u0019\u0007>cE*R\"U\u0013>su\f\u0015*F\r&Cv,\u0011*S\u0003f\u0003\u0003\"CA\u001e\u001b\t\u0007IQAA\u0016\u00031)e\n\u0016*Z?B\u0013VIR%Y\u0011\u001d\ty$\u0004Q\u0001\u000e%\fQ\"\u0012(U%f{\u0006KU#G\u0013b\u0003\u0003\u0002CA\"\u001b\t\u0007IQA3\u0002%\u0015sEKU-`!J+e)\u0013-`\u0003J\u0013\u0016)\u0017\u0005\b\u0003\u000fj\u0001\u0015!\u0004g\u0003M)e\n\u0016*Z?B\u0013VIR%Y?\u0006\u0013&+Q-!\u0011%\tY%\u0004b\u0001\n\u000b\tY#\u0001\nM\u001f\u001e{\u0016\t\u0012#`\u0007>cE*R\"U\u0013>s\u0005bBA(\u001b\u0001\u0006i![\u0001\u0014\u0019>;u,\u0011#E?\u000e{E\nT#D)&{e\n\t\u0005\n\u0003'j!\u0019!C\u0003\u0003W\tQ\u0003T(H?J+Uj\u0014,F?\u000e{E\nT#D)&{e\nC\u0004\u0002X5\u0001\u000bQB5\u0002-1{ui\u0018*F\u001b>3ViX\"P\u00192+5\tV%P\u001d\u0002B\u0011\"a\u0017\u000e\u0005\u0004%)!a\u000b\u0002\u001b1{uiX!E\t~+e\n\u0016*Z\u0011\u001d\ty&\u0004Q\u0001\u000e%\fa\u0002T(H?\u0006#EiX#O)JK\u0006\u0005C\u0005\u0002d5\u0011\r\u0011\"\u0002\u0002,\u0005\u0001BjT$`%\u0016kuJV#`\u000b:#&+\u0017\u0005\b\u0003Oj\u0001\u0015!\u0004j\u0003EaujR0S\u000b6{e+R0F\u001dR\u0013\u0016\f\t\u0005\n\u0003Wj!\u0019!C\u0003\u0003W\t\u0001\u0002T(H?\u0012\u000bE+\u0011\u0005\b\u0003_j\u0001\u0015!\u0004j\u0003%aujR0E\u0003R\u000b\u0005\u0005C\u0005\u0002t5\u0011\r\u0011\"\u0002\u0002,\u0005IAjT$`)J\u000b5)\u0012\u0005\b\u0003oj\u0001\u0015!\u0004j\u0003)aujR0U%\u0006\u001bU\t\t\u0005\n\u0003wj!\u0019!C\u0003\u0003W\t\u0001\u0003T(H?V\u0003F)\u0011+F?\u0016sEKU-\t\u000f\u0005}T\u0002)A\u0007S\u0006\tBjT$`+B#\u0015\tV#`\u000b:#&+\u0017\u0011\t\u0013\u0005\rUB1A\u0005\u0006\u0005\u0015\u0015A\u0003'P\u000f~\u001bVK\u0012$J1V\u0011\u0011qQ\b\u0003\u0003\u0013\u000b#!a#\u0002\t9bwn\u001a\u0005\t\u0003\u001fk\u0001\u0015!\u0004\u0002\b\u0006YAjT$`'V3e)\u0013-!\u0011%\t\u0019*\u0004b\u0001\n\u000b\t)*\u0001\u0007J\u001d\u0012+\u0005lX*V\r\u001aK\u0005,\u0006\u0002\u0002\u0018>\u0011\u0011\u0011T\u0011\u0003\u00037\u000baAL5oI\u0016D\b\u0002CAP\u001b\u0001\u0006i!a&\u0002\u001b%sE)\u0012-`'V3e)\u0013-!\u0011\u001d\t\u0019+\u0004C\u0002\u0003K\u000b1\u0002^8CsR,\u0017I\u001d:bsR\u0019a-a*\t\u0011\u0005%\u0016\u0011\u0015a\u0001\u0003W\u000baAY;gM\u0016\u0014\b\u0003BA\u000b\u0003[KA!a,\u0002\u0018\t1!)\u001e4gKJDq!a-\u000e\t\u0007\t),\u0001\u0005u_\n+hMZ3s)\u0011\tY+a.\t\u000f\u0005%\u0016\u0011\u0017a\u0001M\"9\u00111X\u0007\u0005\u0002\u0005u\u0016AF3oG>$WmQ8mY\u0016\u001cG/[8o%\u0016\u001cwN\u001d3\u0015\u0007\u0019\fy\f\u0003\u0005\u0002B\u0006e\u0006\u0019AAb\u0003\u00051\b\u0003BAc\u0003#tA!a2\u0002N6\u0011\u0011\u0011\u001a\u0006\u0004\u0003\u0017\u0014\u0011A\u0002:fG>\u0014H-\u0003\u0003\u0002P\u0006%\u0017\u0001E\"pY2,7\r^5p]J+7m\u001c:e\u0013\u0011\ty+a5\u000b\t\u0005=\u0017\u0011\u001a\u0005\b\u0003/lA\u0011AAm\u0003Y!WmY8eK\u000e{G\u000e\\3di&|gNU3d_J$G\u0003BAb\u00037D\u0001\"!8\u0002V\u0002\u0007\u00111V\u0001\u0005I\u0006$\u0018\rC\u0004\u0002b6!\t!a9\u00023\u0015t7m\u001c3f\u0007>dG.Z2uS>t7*Z=SK\u000e|'\u000f\u001a\u000b\u0004M\u0006\u0015\b\u0002CAa\u0003?\u0004\r!a:\u0011\t\u0005%\u0018q\u001e\b\u0005\u0003\u000f\fY/\u0003\u0003\u0002n\u0006%\u0017!D\"pY2,7\r^5p].+\u00170\u0003\u0003\u00020\u0006E(\u0002BAw\u0003\u0013Dq!!>\u000e\t\u0003\t90A\reK\u000e|G-Z\"pY2,7\r^5p].+\u0017PU3d_J$G\u0003BAt\u0003sD\u0001\"!8\u0002t\u0002\u0007\u00111\u0016\u0005\b\u0003{lA\u0011AA\u0000\u0003E)gnY8eK\u0016sGO]=SK\u000e|'\u000f\u001a\u000b\u0005\u0003W\u0013\t\u0001\u0003\u0005\u0002B\u0006m\b\u0019\u0001B\u0002!\u0011\u0011)Aa\u0003\u000f\t\u0005\u001d'qA\u0005\u0005\u0005\u0013\tI-A\u0006F]R\u0014\u0018PU3d_J$\u0017\u0002BAX\u0005\u001bQAA!\u0003\u0002J\"9!\u0011C\u0007\u0005\u0002\tM\u0011!\u00053fG>$W-\u00128uef\u0014VmY8sIR!!1\u0001B\u000b\u0011!\tiNa\u0004A\u0002\u0005-\u0006b\u0002B\r\u001b\u0011\u0005!1D\u0001\u0015K:\u001cw\u000eZ3F]R\u0014\u0018pS3z%\u0016\u001cwN\u001d3\u0015\u0007\u0019\u0014i\u0002\u0003\u0005\u0002B\n]\u0001\u0019\u0001B\u0010!\u0011\u0011\tCa\n\u000f\t\u0005\u001d'1E\u0005\u0005\u0005K\tI-\u0001\u0005F]R\u0014\u0018pS3z\u0013\u0011\tyK!\u000b\u000b\t\t\u0015\u0012\u0011\u001a\u0005\b\u0005[iA\u0011\u0001B\u0018\u0003Q!WmY8eK\u0016sGO]=LKf\u0014VmY8sIR!!q\u0004B\u0019\u0011!\tiNa\u000bA\u0002\u0005-\u0006b\u0002B\u001b\u001b\u0011\u0005!qG\u0001\u000eK:\u001cw\u000eZ3M_\u000e\fGo\u001c:\u0015\u000b\u0019\u0014ID!\u0010\t\u000f\tm\"1\u0007a\u0001\r\u0006\u0019\u0001o\\:\t\u0011\t}\"1\u0007a\u0001\u0005\u0003\n1\u0001\\3o!\r\t\"1I\u0005\u0004\u0005\u000b\u0012\"aA%oi\"9!\u0011J\u0007\u0005\u0002\t-\u0013!\u00043fG>$W\rT8dCR|'\u000f\u0006\u0003\u0003N\tM\u0003CB\t\u0003P\u0019\u0013\t%C\u0002\u0003RI\u0011a\u0001V;qY\u0016\u0014\u0004\u0002\u0003B+\u0005\u000f\u0002\r!a+\u0002\u000b\tLH/Z:\t\u000f\t%S\u0002\"\u0001\u0003ZQ!!Q\nB.\u0011\u001d\u0011)Fa\u0016A\u0002\u0019DqAa\u0018\u000e\t\u0003\u0011\t'\u0001\bf]\u000e|G-\u001a'p]\u001eduN\\4\u0015\r\u0005-&1\rB4\u0011\u001d\u0011)G!\u0018A\u0002\u0019\u000b!!Y\u0019\t\u000f\t%$Q\fa\u0001\r\u0006\u0011\u0011M\r\u0005\b\u0005[jA\u0011\u0001B8\u00039!WmY8eK2{gn\u001a'p]\u001e$BA!\u001d\u0003tA)\u0011Ca\u0014G\r\"9!Q\u000bB6\u0001\u00041\u0007b\u0002B<\u001b\u0011\u0005!\u0011P\u0001\u000bK:\u001cw\u000eZ3M_:<G\u0003BAV\u0005wBqA!\u001a\u0003v\u0001\u0007a\tC\u0004\u0003\u00005!\tA!!\u0002\u0017\u0015t7m\u001c3f-2{gn\u001a\u000b\u0004M\n\r\u0005b\u0002B3\u0005{\u0002\rA\u0012\u0005\b\u0005\u000fkA\u0011\u0001BE\u0003-!WmY8eKZcuN\\4\u0015\u0007\u0019\u0013Y\tC\u0004\u0003V\t\u0015\u0005\u0019\u00014\t\u000f\t=U\u0002\"\u0001\u0003\u0012\u0006iQM\\2pI\u0016duN\\4LKf$RA\u001aBJ\u0005+CqA!\u001a\u0003\u000e\u0002\u0007\u0011\u000eC\u0004\u0003j\t5\u0005\u0019\u0001$\t\u000f\teU\u0002\"\u0001\u0003\u001c\u0006iA-Z2pI\u0016duN\\4LKf$BA!(\u0003 B)\u0011Ca\u0014j\r\"9!Q\u000bBL\u0001\u00041\u0007b\u0002BR\u001b\u0011\u0005!QU\u0001\u000bI\u0016\u001cw\u000eZ3M_:<Gc\u0001$\u0003(\"A!Q\u000bBQ\u0001\u0004\tY\u000bC\u0004\u0003$6!\tAa+\u0015\u0007\u0019\u0013i\u000bC\u0004\u0003V\t%\u0006\u0019\u00014\t\u000f\tEV\u0002\"\u0001\u00034\u0006qQM\\2pI\u0016,e\u000e\u001e:z\u0017\u0016LHc\u00024\u00036\n]&\u0011\u0018\u0005\b\u0005K\u0012y\u000b1\u0001j\u0011\u001d\u0011IGa,A\u0002\u0019CqAa/\u00030\u0002\u0007a)\u0001\u0002bg!9!\u0011W\u0007\u0005\u0002\t}Fc\u00024\u0003B\n\r'Q\u0019\u0005\b\u0005K\u0012i\f1\u0001j\u0011\u001d\u0011IG!0A\u0002\u0019C\u0001Ba/\u0003>\u0002\u0007\u00111\u0016\u0005\b\u0005\u0013lA\u0011\u0001Bf\u00039!WmY8eK\u0016sGO]=LKf$BA!4\u0003TB9\u0011Ca4j\r\u0006-\u0016b\u0001Bi%\t1A+\u001e9mKNBqA!\u0016\u0003H\u0002\u0007aM\u0002\u0004\u0003X6\u0011!\u0011\u001c\u0002\u0007%&\u001c\u0007\u000e\u0012\"\u0014\u0007\tU\u0007\u0003C\u0006\u0003^\nU'Q1A\u0005\u0002\t}\u0017A\u00013c+\t\u0011\t\u000fE\u0002\\\u0005GL1A!:]\u0005\t!%\tC\u0006\u0003j\nU'\u0011!Q\u0001\n\t\u0005\u0018a\u00013cA!9QD!6\u0005\u0002\t5H\u0003\u0002Bx\u0005c\u00042A\rBk\u0011!\u0011iNa;A\u0002\t\u0005\bB\u0003B{\u0005+\u0014\r\u0011\"\u0001\u0003x\u0006\t\u0012n\u001d)ve\u0016T\u0015M^1WKJ\u001c\u0018n\u001c8\u0016\u0005\te\bcA\t\u0003|&\u0019!Q \n\u0003\u000f\t{w\u000e\\3b]\"I1\u0011\u0001BkA\u0003%!\u0011`\u0001\u0013SN\u0004VO]3KCZ\fg+\u001a:tS>t\u0007\u0005\u0003\u0005\u0004\u0006\tUG\u0011AB\u0004\u0003-9W\r\u001e)s_B,'\u000f^=\u0015\t\r%1q\u0002\t\u0004G\r-\u0011bAB\u0007I\t11\u000b\u001e:j]\u001eD\u0001b!\u0005\u0004\u0004\u0001\u000711C\u0001\u0005]\u0006lW\r\u0005\u0003\u0004\u0016\rmabA\t\u0004\u0018%\u00191\u0011\u0004\n\u0002\rA\u0013X\rZ3g\u0013\u0011\u0019ia!\b\u000b\u0007\re!\u0003\u0003\u0005\u0004\"\tUG\u0011AB\u0012\u0003M9W\r^!qaJ|\u00070[7bi\u0016\u001c\u0016N_3t)\u0011\u0019)ca\n\u0011\u0007E9g\t\u0003\u0005\u0004*\r}\u0001\u0019AB\u0016\u0003\u0019\u0011\u0018M\\4fgB)\u0011c!\f\u00042%\u00191q\u0006\n\u0003\u0015q\u0012X\r]3bi\u0016$g\bE\u0002\\\u0007gI1a!\u000e]\u0005\u0015\u0011\u0016M\\4f\u0011!\u0019ID!6\u0005\u0002\rm\u0012aA4fiR11QHB\"\u0007\u000f\u0002B!EB M&\u00191\u0011\t\n\u0003\r=\u0003H/[8o\u0011\u001d\u0019)ea\u000eA\u0002\u0019\f1a[3z\u0011)\u0019Iea\u000e\u0011\u0002\u0003\u000711J\u0001\u0003e>\u00042aWB'\u0013\r\u0019y\u0005\u0018\u0002\f%\u0016\fGm\u00149uS>t7\u000f\u0003\u0005\u0004T\tUG\u0011AB+\u0003\u0015\u0019Gn\\:f+\t\u00199\u0006E\u0002\u0012\u00073J1aa\u0017\u0013\u0005\u0011)f.\u001b;\t\u0011\r}#Q\u001bC\u0001\u0007C\na\u0001Z3mKR,GCBB,\u0007G\u001a)\u0007C\u0004\u0004F\ru\u0003\u0019\u00014\t\u0013\r\u001d4Q\fI\u0001\u0002\u0004Q\u0016AA<p\u0011!\u0019YG!6\u0005\u0002\r5\u0014a\u00019viRA1qKB8\u0007c\u001a)\bC\u0004\u0004F\r%\u0004\u0019\u00014\t\u000f\rM4\u0011\u000ea\u0001M\u0006)a/\u00197vK\"I1qMB5!\u0003\u0005\rA\u0017\u0005\t\u0007s\u0012)\u000e\"\u0001\u0004|\u0005)qO]5uKV!1QPBC)\u0019\u0019yha*\u0004*R!1\u0011QBL!\u0011\u0019\u0019i!\"\r\u0001\u0011A1qQB<\u0005\u0004\u0019IIA\u0001U#\u0011\u0019Yi!%\u0011\u0007E\u0019i)C\u0002\u0004\u0010J\u0011qAT8uQ&tw\rE\u0002\u0012\u0007'K1a!&\u0013\u0005\r\te.\u001f\u0005\t\u00073\u001b9\b1\u0001\u0004\u001c\u0006!a-\u001e8d!\u001d\t2QTBQ\u0007\u0003K1aa(\u0013\u0005%1UO\\2uS>t\u0017\u0007E\u0002\\\u0007GK1a!*]\u0005)9&/\u001b;f\u0005\u0006$8\r\u001b\u0005\n\u0007O\u001a9\b%AA\u0002iC!ba+\u0004xA\u0005\t\u0019ABW\u0003Ei\u0017\r_0xe&$Xm\u00187bi\u0016t7-\u001f\t\u0004/\r=\u0016bABY1\tQA+[7f\u001b\u0016$(/[2\t\u0011\rU&Q\u001bC\u0001\u0007o\u000bQa\u001d;pe\u0016,Ba!/\u0004FR111XBa\u0007\u0007\u00042aWB_\u0013\r\u0019y\f\u0018\u0002\t':\f\u0007o\u001d5pi\"A1\u0011PBZ\u0001\u0004\u0019\t\u000bC\u0005\u0004h\rM\u0006\u0013!a\u00015\u0012A1qQBZ\u0005\u0004\u0019I\t\u0003\u0005\u0004J\nUG\u0011ABf\u0003!\u0019h.\u00199tQ>$X\u0003BBg\u0007#$Baa4\u0004TB!11QBi\t!\u00199ia2C\u0002\r%\u0005\u0002CBM\u0007\u000f\u0004\ra!6\u0011\u000fE\u0019ija/\u0004P\"A1\u0011\u001cBk\t\u0003\u0019Y.\u0001\u0006dkJ\u001cxN]&fsN$Ba!8\u0004dR!1qKBp\u0011!\u0019Ija6A\u0002\r\u0005\bCB\t\u0004\u001e\u001a\u0014I\u0010\u0003\u0006\u0004J\r]\u0007\u0013!a\u0001\u0007\u0017B\u0001ba:\u0003V\u0012\u00051\u0011^\u0001\u0013GV\u00148o\u001c:LKf\u001c\bK]3gSb,G\r\u0006\u0004\u0004l\u000e=81\u001f\u000b\u0005\u0007/\u001ai\u000f\u0003\u0005\u0004\u001a\u000e\u0015\b\u0019ABq\u0011\u001d\u0019\tp!:A\u0002\u0019\fa\u0001\u001d:fM&D\bBCB%\u0007K\u0004\n\u00111\u0001\u0004L!A1q\u001fBk\t\u0003\u0019I0\u0001\bdkJ\u001cxN\u001d)sK\u001aL\u00070\u001a3\u0015\r\rmHQ\u0001C\u0004)\u0011\u00199f!@\t\u0011\re5Q\u001fa\u0001\u0007\u007f\u0004r!\u0005C\u0001M\u001a\u0014I0C\u0002\u0005\u0004I\u0011\u0011BR;oGRLwN\u001c\u001a\t\u000f\rE8Q\u001fa\u0001M\"Q1\u0011JB{!\u0003\u0005\raa\u0013\t\u0011\u0011-!Q\u001bC\u0001\t\u001b\tqaY8na\u0006\u0014X\r\u0006\u0004\u0003B\u0011=A\u0011\u0003\u0005\b\u0005K\"I\u00011\u0001g\u0011\u001d\u0011I\u0007\"\u0003A\u0002\u0019D\u0001\u0002\"\u0006\u0003V\u0012\u0005AqC\u0001\u0010GV\u00148o\u001c:SC:<WmS3zgRAA\u0011\u0004C\u000f\tC!)\u0003\u0006\u0003\u0004X\u0011m\u0001\u0002CBM\t'\u0001\ra!9\t\u000f\u0011}A1\u0003a\u0001M\u0006i1\u000f^1si&s7\r\\;eK\u0012Dq\u0001b\t\u0005\u0014\u0001\u0007a-A\u0006f]\u0012,\u0005p\u00197vI\u0016$\u0007BCB%\t'\u0001\n\u00111\u0001\u0004L!AA\u0011\u0006Bk\t\u0003!Y#A\u0006dkJ\u001cxN\u001d*b]\u001e,G\u0003\u0003C\u0017\tc!\u0019\u0004\"\u000e\u0015\t\r]Cq\u0006\u0005\t\u00073#9\u00031\u0001\u0004\u0000\"9Aq\u0004C\u0014\u0001\u00041\u0007b\u0002C\u0012\tO\u0001\rA\u001a\u0005\u000b\u0007\u0013\"9\u0003%AA\u0002\r-\u0003\u0002\u0003C\u001d\u0005+$\t\u0001b\u000f\u0002\u000f1\f7\u000f^&fsR11Q\bC\u001f\t\u007fAqa!=\u00058\u0001\u0007a\r\u0003\u0006\u0004J\u0011]\u0002\u0013!a\u0001\u0007\u0017B\u0001\u0002b\u0011\u0003V\u0012\u00051QK\u0001\bG>l\u0007/Y2u\u0011!!9E!6\u0005\n\u0011%\u0013\u0001G7jO\"$x\f\u001e:jO\u001e,'oX2p[B\f7\r^5p]V!A1\nC()\u0011!i\u0005\"\u0015\u0011\t\r\rEq\n\u0003\t\u0007\u000f#)E1\u0001\u0004\n\"I1\u0011\u0014C#\t\u0003\u0007A1\u000b\t\u0006#\u0011UCQJ\u0005\u0004\t/\u0012\"\u0001\u0003\u001fcs:\fW.\u001a \t\u0015\u0011m#Q\u001ba\u0001\n\u0003\u001190\u0001\bd_6\u0004\u0018m\u0019;`]\u0016,G-\u001a3\t\u0015\u0011}#Q\u001ba\u0001\n\u0003!\t'\u0001\nd_6\u0004\u0018m\u0019;`]\u0016,G-\u001a3`I\u0015\fH\u0003BB,\tGB!\u0002\"\u001a\u0005^\u0005\u0005\t\u0019\u0001B}\u0003\rAH%\r\u0005\n\tS\u0012)\u000e)Q\u0005\u0005s\fqbY8na\u0006\u001cGo\u00188fK\u0012,G\r\t\u0015\u0005\tO\"i\u0007E\u0002\u0012\t_J1\u0001\"\u001d\u0013\u0005!1x\u000e\\1uS2,\u0007B\u0003C;\u0005+\f\n\u0011\"\u0001\u0005x\u0005iq-\u001a;%I\u00164\u0017-\u001e7uII*\"\u0001\"\u001f+\t\r-C1P\u0016\u0003\t{\u0002B\u0001b \u0005\n6\u0011A\u0011\u0011\u0006\u0005\t\u0007#))A\u0005v]\u000eDWmY6fI*\u0019Aq\u0011\n\u0002\u0015\u0005tgn\u001c;bi&|g.\u0003\u0003\u0005\f\u0012\u0005%!E;oG\",7m[3e-\u0006\u0014\u0018.\u00198dK\"QAq\u0012Bk#\u0003%\t\u0001\"%\u0002\u001bA,H\u000f\n3fM\u0006,H\u000e\u001e\u00134+\t!\u0019JK\u0002[\twB!\u0002b&\u0003VF\u0005I\u0011\u0001C<\u0003a\u0019WO]:peB\u0013XMZ5yK\u0012$C-\u001a4bk2$HE\r\u0005\u000b\t7\u0013).%A\u0005\u0002\u0011E\u0015\u0001\u00053fY\u0016$X\r\n3fM\u0006,H\u000e\u001e\u00133\u0011)!yJ!6\u0012\u0002\u0013\u0005AqO\u0001\u001dGV\u00148o\u001c:LKf\u001c\bK]3gSb,G\r\n3fM\u0006,H\u000e\u001e\u00133\u0011)!\u0019K!6\u0012\u0002\u0013\u0005AqO\u0001\u0016GV\u00148o\u001c:SC:<W\r\n3fM\u0006,H\u000e\u001e\u00134\u0011)!9K!6\u0012\u0002\u0013\u0005A\u0011V\u0001\u0010oJLG/\u001a\u0013eK\u001a\fW\u000f\u001c;%cU!A\u0011\u0013CV\t!\u00199\t\"*C\u0002\r%\u0005B\u0003CX\u0005+\f\n\u0011\"\u0001\u00052\u0006yqO]5uK\u0012\"WMZ1vYR$#'\u0006\u0003\u00054\u0012]VC\u0001C[U\u0011\u0019i\u000bb\u001f\u0005\u0011\r\u001dEQ\u0016b\u0001\u0007\u0013C!\u0002b/\u0003VF\u0005I\u0011\u0001C_\u0003=\u0019Ho\u001c:fI\u0011,g-Y;mi\u0012\u0012T\u0003\u0002CI\t\u007f#\u0001ba\"\u0005:\n\u00071\u0011\u0012\u0005\u000b\t\u0007\u0014).%A\u0005\u0002\u0011]\u0014\u0001F2veN|'oS3zg\u0012\"WMZ1vYR$\u0013\u0007\u0003\u0006\u0005H\nU\u0017\u0013!C\u0001\to\n\u0011dY;sg>\u0014(+\u00198hK.+\u0017p\u001d\u0013eK\u001a\fW\u000f\u001c;%g!QA1\u001aBk#\u0003%\t\u0001b\u001e\u0002#1\f7\u000f^&fs\u0012\"WMZ1vYR$#\u0007C\u0004\u0003V5!\t\u0001b4\u0015\u0007\u0019$\t\u000e\u0003\u0005\u0004t\u00115\u0007\u0019AB\n\u0011\u001d!).\u0004C\u0001\t/\fAc\u0019:fCR,wl]3rk\u0016t7-Z0gS2,G\u0003\u0003Cm\tK$I\u000f\"<\u0011\t\u0011mG\u0011]\u0007\u0003\t;T1\u0001b8'\u0003\tIw.\u0003\u0003\u0005d\u0012u'\u0001\u0002$jY\u0016D\u0001\u0002b:\u0005T\u0002\u0007A\u0011\\\u0001\nI&\u0014Xm\u0019;pefDq\u0001b;\u0005T\u0002\u0007a)\u0001\u0002jI\"AAq\u001eCj\u0001\u0004\u0019\u0019\"\u0001\u0004tk\u001a4\u0017\u000e\u001f\u0005\b\tglA\u0011\u0001C{\u0003M1\u0017N\u001c3`g\u0016\fX/\u001a8dK~3\u0017\u000e\\3t)\u0019!90b\u0002\u0006\nA9A\u0011`C\u0002\r\u0012eWB\u0001C~\u0015\u0011!i\u0010b@\u0002\u0013%lW.\u001e;bE2,'bAC\u0001%\u0005Q1m\u001c7mK\u000e$\u0018n\u001c8\n\t\u0015\u0015A1 \u0002\b)J,W-T1q\u0011!!9\u000f\"=A\u0002\u0011e\u0007\u0002\u0003Cx\tc\u0004\raa\u0005\u0007\r\u00155Q\u0002AC\b\u00059\u0019u\u000e\u001c7fGRLwN\\'fi\u0006\u001cR!b\u0003\u0011\u000b#\u00012!EC\n\u0013\r))B\u0005\u0002\r'\u0016\u0014\u0018.\u00197ju\u0006\u0014G.\u001a\u0005\b;\u0015-A\u0011AC\r)\t)Y\u0002E\u00023\u000b\u0017A\u0011\"b\b\u0006\f\u0001\u0007I\u0011A#\u0002\tML'0\u001a\u0005\u000b\u000bG)Y\u00011A\u0005\u0002\u0015\u0015\u0012\u0001C:ju\u0016|F%Z9\u0015\t\r]Sq\u0005\u0005\n\tK*\t#!AA\u0002\u0019C\u0001\"b\u000b\u0006\f\u0001\u0006KAR\u0001\u0006g&TX\r\t\u0005\f\u000b_)Y\u00011AA\u0002\u0013\u0005Q-\u0001\u0005mCN$xl[3z\u00111)\u0019$b\u0003A\u0002\u0003\u0007I\u0011AC\u001b\u00031a\u0017m\u001d;`W\u0016Lx\fJ3r)\u0011\u00199&b\u000e\t\u0013\u0011\u0015T\u0011GA\u0001\u0002\u00041\u0007\u0002CC\u001e\u000b\u0017\u0001\u000b\u0015\u00024\u0002\u00131\f7\u000f^0lKf\u0004\u0003bBC \u001b\u0011\u0005Q\u0011I\u0001\nG>\u0004\u00180\u00138eKb$baa\u0016\u0006D\u0015\u001d\u0003\u0002CC#\u000b{\u0001\r\u0001\"7\u0002\t\u0019\u0014x.\u001c\u0005\t\u000b\u0013*i\u00041\u0001\u0005Z\u0006\u0011Ao\u001c\u0004\u0006\u001d\t\u0001QQJ\n\u0004\u000b\u0017\u0002\u0002bCB[\u000b\u0017\u0012\t\u0011)A\u0005\u000b#\u00022\u0001DC*\u0013\r))F\u0001\u0002\r\u0019\u00164X\r\u001c#C'R|'/\u001a\u0005\b;\u0015-C\u0011AC-)\u0011)Y&\"\u0018\u0011\u00071)Y\u0005\u0003\u0005\u00046\u0016]\u0003\u0019AC)\u0011))\t'b\u0013C\u0002\u0013\u0005Q1M\u0001\u000eI&\u001c\b/\u0019;dQF+X-^3\u0016\u0005\u0015\u0015\u0004\u0003BC4\u000b[j!!\"\u001b\u000b\t\u0015-\u00141D\u0001\rQ\u0006<H\u000fZ5ta\u0006$8\r[\u0005\u0005\u000b_*IGA\u0007ESN\u0004\u0018\r^2i#V,W/\u001a\u0005\n\u000bg*Y\u0005)A\u0005\u000bK\na\u0002Z5ta\u0006$8\r[)vKV,\u0007\u0005\u0003\u0005\u0005h\u0016-C\u0011AC<+\t!I\u000e\u0003\u0005\u0006|\u0015-C\u0011AC<\u00031awn\u001a#je\u0016\u001cGo\u001c:z\u0011!)y(b\u0013\u0005\u0002\t]\u0018\u0001B:z]\u000eD\u0001\"b!\u0006L\u0011\u0005!q_\u0001\u0010m\u0016\u0014\u0018NZ=DQ\u0016\u001c7n];ng\"aQqQC&\u0001\u0004\u0005\r\u0011\"\u0001\u0006\n\u0006\u0019An\\4\u0016\u0005\u0015-\u0005c\u0001\u0007\u0006\u000e&\u0019Qq\u0012\u0002\u0003\u0013I+7m\u001c:e\u0019><\u0007\u0002DCJ\u000b\u0017\u0002\r\u00111A\u0005\u0002\u0015U\u0015a\u00027pO~#S-\u001d\u000b\u0005\u0007/*9\n\u0003\u0006\u0005f\u0015E\u0015\u0011!a\u0001\u000b\u0017C\u0011\"b'\u0006L\u0001\u0006K!b#\u0002\t1|w\r\t\u0005\r\u000b?+Y\u00051AA\u0002\u0013\u0005Q\u0011U\u0001\u0006S:$W\r_\u000b\u0003\u000bG\u0003B!\"*\u0003V:\u0011A\u0002\u0001\u0005\r\u000bS+Y\u00051AA\u0002\u0013\u0005Q1V\u0001\nS:$W\r_0%KF$Baa\u0016\u0006.\"QAQMCT\u0003\u0003\u0005\r!b)\t\u0013\u0015EV1\nQ!\n\u0015\r\u0016AB5oI\u0016D\b\u0005\u0003\u0007\u00066\u0016-\u0003\u0019!a\u0001\n\u0003)\t+A\u0003qY&\u001cH\u000f\u0003\u0007\u0006:\u0016-\u0003\u0019!a\u0001\n\u0003)Y,A\u0005qY&\u001cHo\u0018\u0013fcR!1qKC_\u0011)!)'b.\u0002\u0002\u0003\u0007Q1\u0015\u0005\n\u000b\u0003,Y\u0005)Q\u0005\u000bG\u000ba\u0001\u001d7jgR\u0004\u0003\u0002DCc\u000b\u0017\u0002\r\u00111A\u0005\u0002\u0015\u001d\u0017\u0001D5oI\u0016Dx\n\u001d;j_:\u001cXCACe!\rYV1Z\u0005\u0004\u000b\u001bd&aB(qi&|gn\u001d\u0005\r\u000b#,Y\u00051AA\u0002\u0013\u0005Q1[\u0001\u0011S:$W\r_(qi&|gn]0%KF$Baa\u0016\u0006V\"QAQMCh\u0003\u0003\u0005\r!\"3\t\u0013\u0015eW1\nQ!\n\u0015%\u0017!D5oI\u0016Dx\n\u001d;j_:\u001c\b\u0005C\u0006\u0006^\u0016-\u0003\u0019!a\u0001\n\u0003)\u0015\u0001\u00067bgRLe\u000eZ3y':\f\u0007o\u001d5piB{7\u000f\u0003\u0007\u0006b\u0016-\u0003\u0019!a\u0001\n\u0003)\u0019/\u0001\rmCN$\u0018J\u001c3fqNs\u0017\r]:i_R\u0004vn]0%KF$Baa\u0016\u0006f\"IAQMCp\u0003\u0003\u0005\rA\u0012\u0005\t\u000bS,Y\u0005)Q\u0005\r\u0006)B.Y:u\u0013:$W\r_*oCB\u001c\bn\u001c;Q_N\u0004\u0003BCCw\u000b\u0017\u0012\r\u0011\"\u0001\u0006p\u0006q1O\\1qg\"|GOU<M_\u000e\\WCACy!\u0011)\u00190\"?\u000e\u0005\u0015U(bAC|!\u0006)An\\2lg&!Q1`C{\u0005Y\u0011V-\u001a8ue\u0006tGOU3bI^\u0013\u0018\u000e^3M_\u000e\\\u0007\"CC\u0000\u000b\u0017\u0002\u000b\u0011BCy\u0003=\u0019h.\u00199tQ>$(k\u001e'pG.\u0004\u0003\u0002\u0004D\u0002\u000b\u0017\u0002\r\u00111A\u0005\u0002\u0019\u0015\u0011a\u00024bGR|'/_\u000b\u0003\r\u000f\u00012a\u0017D\u0005\u0013\r1Y\u0001\u0018\u0002\n\t\n3\u0015m\u0019;pefDABb\u0004\u0006L\u0001\u0007\t\u0019!C\u0001\r#\t1BZ1di>\u0014\u0018p\u0018\u0013fcR!1q\u000bD\n\u0011)!)G\"\u0004\u0002\u0002\u0003\u0007aq\u0001\u0005\n\r/)Y\u0005)Q\u0005\r\u000f\t\u0001BZ1di>\u0014\u0018\u0010\t\u0005\u000b\r7)YE1A\u0005\u0002\u0019u\u0011a\u00027pOJ+gm]\u000b\u0003\r?\u0001rA\"\t\u0007(\u00193Y#\u0004\u0002\u0007$)!aQ\u0005C\u0000\u0003\u001diW\u000f^1cY\u0016LAA\"\u000b\u0007$\t9\u0001*Y:i\u001b\u0006\u0004\bcA\f\u0007.%\u0019aq\u0006\r\u0003\u00171{gnZ\"pk:$XM\u001d\u0005\n\rg)Y\u0005)A\u0005\r?\t\u0001\u0002\\8h%\u001647\u000f\t\u0005\r\ro)Y\u00051AA\u0002\u0013\u0005a\u0011H\u0001\re\u0016\u001cwN^3ss2{wm]\u000b\u0003\rw\u0001rA\"\u0010\u0007@\u00193\t%D\u0001S\u0013\r))A\u0015\t\u0004G\u0019\r\u0013b\u0001D#I\t!ak\\5e\u001111I%b\u0013A\u0002\u0003\u0007I\u0011\u0001D&\u0003A\u0011XmY8wKJLHj\\4t?\u0012*\u0017\u000f\u0006\u0003\u0004X\u00195\u0003B\u0003C3\r\u000f\n\t\u00111\u0001\u0007<!Ia\u0011KC&A\u0003&a1H\u0001\u000ee\u0016\u001cwN^3ss2{wm\u001d\u0011\t\u0015\u0019US1\nb\u0001\n\u000319&\u0001\bd_2dWm\u0019;j_:lU\r^1\u0016\u0005\u0019e\u0003c\u0002D\u0011\rO1e1\f\t\u0005\u000bK+Y\u0001C\u0005\u0007`\u0015-\u0003\u0015!\u0003\u0007Z\u0005y1m\u001c7mK\u000e$\u0018n\u001c8NKR\f\u0007\u0005\u0003\u0005\u0007d\u0015-C\u0011AC<\u00039\u0001H.[:u\u0013:$W\r\u001f$jY\u0016D\u0001Bb\u001a\u0006L\u0011\u0005QqO\u0001\u000fI&\u0014H/_%oI\u0016Dh)\u001b7f\u0011!1Y'b\u0013\u0005\u0002\u0015]\u0014!\u0004;f[BLe\u000eZ3y\r&dW\r\u0003\u0005\u0007p\u0015-C\u0011\u0001D9\u0003E\u0019h.\u00199tQ>$\u0018J\u001c3fq\u001aKG.\u001a\u000b\u0005\t34\u0019\bC\u0004\u0005l\u001a5\u0004\u0019\u0001$\t\u000f\u0015}Q1\nC\u0001\u000b\"Aa\u0011PC&\t\u0003)I)A\u0005de\u0016\fG/\u001a'pO\"aaQPC&\u0001\u0004\u0005\r\u0011\"\u0001\u0007\u0000\u0005iqO]5uK\u0016CXmY;u_J,\"A\"!\u0011\u0007=3\u0019)C\u0002\u0007\u0006B\u0013q\"\u0012=fGV$xN]*feZL7-\u001a\u0005\r\r\u0013+Y\u00051AA\u0002\u0013\u0005a1R\u0001\u0012oJLG/Z#yK\u000e,Ho\u001c:`I\u0015\fH\u0003BB,\r\u001bC!\u0002\"\u001a\u0007\b\u0006\u0005\t\u0019\u0001DA\u0011%1\t*b\u0013!B\u00131\t)\u0001\bxe&$X-\u0012=fGV$xN\u001d\u0011\t\u0011\u0019UU1\nC\u0001\r/\u000b\u0011c\u001e:ji\u0016,\u00050Z2vi>\u0014X\t_3d)\u0011\u00199F\"'\t\u0013\ree1\u0013CA\u0002\u0019m\u0005#B\t\u0005V\r]\u0003\u0002\u0003DP\u000b\u0017\"\tA\")\u0002\u0015M$xN]3Ue\u0006\u001cW\r\u0006\u0004\u0004X\u0019\rfq\u0015\u0005\t\rK3i\n1\u0001\u0004\u0014\u0005)\u0011m]2jS\"Qa\u0011\u0016DO!\u0003\u0005\rA!?\u0002\u000b\u0019|'oY3\t\u0011\u00195V1\nC\u0001\r_\u000b!\"\\5hQR|f-Y5m+\u00111\tL\".\u0015\t\u0019Mfq\u0017\t\u0005\u0007\u00073)\f\u0002\u0005\u0004\b\u001a-&\u0019ABE\u0011%\u0019IJb+\u0005\u0002\u00041I\fE\u0003\u0012\t+2\u0019\f\u0003\u0005\u0007>\u0016-C\u0011\u0001D`\u0003\u0015\u0019H/\u0019:u)\t\u00199\u0006\u0003\u0005\u0007D\u0016-C\u0011AB+\u0003u\t7o]3si~;(/\u001b;f?RD'/Z1e?\u0016DXmY;uS:<\u0007\u0002\u0003Dd\u000b\u0017\"\tAb0\u0002\t%t\u0017\u000e\u001e\u0005\t\r\u0017,Y\u0005\"\u0001\u0004V\u0005y\u0001o\\:u?2|wm\u0018:pi\u0006$X\r\u0003\u0005\u0007P\u0016-C\u0011\u0001D`\u0003-\u0011X\r\u001d7bs~Kg.\u001b;\t\u0015\u0019MW1\na\u0001\n\u00031).\u0001\nsKBd\u0017-_0xe&$Xm\u00182bi\u000eDWCABQ\u0011)1I.b\u0013A\u0002\u0013\u0005a1\\\u0001\u0017e\u0016\u0004H.Y=`oJLG/Z0cCR\u001c\u0007n\u0018\u0013fcR!1q\u000bDo\u0011)!)Gb6\u0002\u0002\u0003\u00071\u0011\u0015\u0005\n\rC,Y\u0005)Q\u0005\u0007C\u000b1C]3qY\u0006Lxl\u001e:ji\u0016|&-\u0019;dQ\u0002B\u0011B\":\u0006L\u0001\u0007I\u0011A#\u0002+%tG-\u001a=SK\u000e|g/\u001a:z!>\u001c\u0018\u000e^5p]\"Qa\u0011^C&\u0001\u0004%\tAb;\u00023%tG-\u001a=SK\u000e|g/\u001a:z!>\u001c\u0018\u000e^5p]~#S-\u001d\u000b\u0005\u0007/2i\u000fC\u0005\u0005f\u0019\u001d\u0018\u0011!a\u0001\r\"Aa\u0011_C&A\u0003&a)\u0001\fj]\u0012,\u0007PU3d_Z,'/\u001f)pg&$\u0018n\u001c8!\u0011!1)0b\u0013\u0005\u0002\u0019]\u0018a\u0003:fa2\f\u0017p\u00184s_6$\u0002ba\u0016\u0007z\u001amhq \u0005\b\u000b\u000b2\u0019\u00101\u0001G\u0011\u001d1iPb=A\u0002\u0019\u000bQ\u0001\\5nSRD!b\"\u0001\u0007tB\u0005\t\u0019\u0001B}\u00039\u0001(/\u001b8u?B\u0014xn\u001a:fgND\u0001b\"\u0002\u0006L\u0011%qqA\u0001\u0010Y><'+\u001a4EK\u000e\u0014X-\\3oiR!1qKD\u0005\u0011\u001d\u0011Ydb\u0001A\u0002\u0019C\u0001b\"\u0004\u0006L\u0011%qqB\u0001\u0010Y><'+\u001a4J]\u000e\u0014X-\\3oiR!1qKD\t\u0011\u001d\u0011Ydb\u0003A\u0002\u0019C\u0001b\"\u0006\u0006L\u0011\u0005qqC\u0001\nY><'+\u001a4LKf$ba\"\u0007\b\u001c\u001du\u0001\u0003B\t\u0004@\u0019CqAa\u000f\b\u0014\u0001\u0007a\t\u0003\u0006\b \u001dM\u0001\u0013!a\u0001\u000fC\t\u0001\u0002\\8h?&tgm\u001c\t\u0005\u000fG9ICD\u0002\r\u000fKI1ab\n\u0003\u0003%\u0011VmY8sI2{w-\u0003\u0003\b,\u001d5\"a\u0002'pO&sgm\u001c\u0006\u0004\u000fO\u0011\u0001\u0002CD\u0019\u000b\u0017\"Iab\r\u0002/\r|G\u000e\\3di&|g\u000eR3de\u0016lWM\u001c;TSj,G\u0003BB,\u000fkAqa!\u0012\b0\u0001\u0007a\t\u0003\u0005\b:\u0015-C\u0011BD\u001e\u0003]\u0019w\u000e\u001c7fGRLwN\\%oGJ,W.\u001a8u'&TX\r\u0006\u0004\u0004X\u001durq\b\u0005\b\u0007\u000b:9\u00041\u0001G\u0011\u001d)ycb\u000eA\u0002\u0019D\u0001bb\u0011\u0006L\u0011%1QK\u0001\u000egR|'/Z\"pk:$XM]:\t\u0011\u001d\u001dS1\nC\u0005\u0007+\nA\u0002\\8bI\u000e{WO\u001c;feND\u0011bb\u0013\u0006L\u0001\u0007I\u0011A#\u00025M$xN]3e?^\fGnX1qa\u0016tGm\u00189pg&$\u0018n\u001c8\t\u0015\u001d=S1\na\u0001\n\u00039\t&\u0001\u0010ti>\u0014X\rZ0xC2|\u0016\r\u001d9f]\u0012|\u0006o\\:ji&|gn\u0018\u0013fcR!1qKD*\u0011%!)g\"\u0014\u0002\u0002\u0003\u0007a\t\u0003\u0005\bX\u0015-\u0003\u0015)\u0003G\u0003m\u0019Ho\u001c:fI~;\u0018\r\\0baB,g\u000eZ0q_NLG/[8oA!9q1LC&\t\u0003)\u0015aE<bY~\u000b\u0007\u000f]3oI~\u0003xn]5uS>t\u0007\u0002CD0\u000b\u0017\"\ta!\u0016\u0002\u0015\u0011L'\u000f^=`gR|\u0007\u000f\u0003\u0005\bd\u0015-C\u0011\u0001D`\u0003\u0011\u0019Ho\u001c9\t\u0011\u001d\u001dT1\nC\u0001\u000fS\n!\"^:j]\u001eLe\u000eZ3y+\u00119Ygb\u001c\u0015\t\u001d5t\u0011\u000f\t\u0005\u0007\u0007;y\u0007\u0002\u0005\u0004\b\u001e\u0015$\u0019ABE\u0011%\u0019Ij\"\u001a\u0005\u0002\u00049\u0019\bE\u0003\u0012\t+:i\u0007\u0003\u0005\bx\u0015-C\u0011AD=\u0003Yi\u0017n\u001a5u?\u001a\f\u0017\u000e\\0vg&twmX5oI\u0016DX\u0003BD>\u000f\u007f\"Ba\" \b\u0002B!11QD@\t!\u00199i\"\u001eC\u0002\r%\u0005\"CBM\u000fk\"\t\u0019ADB!\u0015\tBQKD?\u0011!99)b\u0013\u0005\u0002\u0019}\u0016aB:vgB,g\u000e\u001a\u0005\t\u000f\u0017+Y\u0005\"\u0001\u0007@\u00061!/Z:v[\u0016Dqab$\u0006L\u0011\u0005Q)\u0001\u000boKb$\u0018J\u001c3fqNs\u0017\r]:i_R\u0004vn\u001d\u0005\t\u000f'+Y\u0005\"\u0001\u0004V\u0005A2m\u001c9z\t&\u0014H/_%oI\u0016DHk\\*oCB\u001c\bn\u001c;\t\u0011\u001dMU1\nC\u0001\u000f/#Baa\u0016\b\u001a\"9q1TDK\u0001\u00041\u0015aC<bYB{7/\u001b;j_:D\u0001bb(\u0006L\u0011\u0005q\u0011U\u0001\u001fe\u0016\u0004H.Y2f\u0019\u0006$Xm\u001d;T]\u0006\u00048\u000f[8u\t&\u0014Xm\u0019;pef$Baa\u0016\b$\"9qQUDO\u0001\u00041\u0015a\u00058foNs\u0017\r]:i_RLe\u000eZ3y!>\u001c\b\u0002CDU\u000b\u0017\"\tab+\u0002\u001bMt\u0017\r]:i_RLe\u000eZ3y)\u0011\u00199f\",\t\u0015\u0015}tq\u0015I\u0001\u0002\u0004\u0011I\u0010\u0003\u0005\b2\u0016-C\u0011\u0001D`\u0003\u0015\u0001XO]4f\u0011!9),b\u0013\u0005\u0002\rU\u0013\u0001\u00047pG.,Gm\u00189ve\u001e,\u0007\u0002CD]\u000b\u0017\"\tab/\u0002\u001b\u0005$GmQ8mY\u0016\u001cG/[8o)\u00119ilb0\u0011\u000bE\u0019yDb\u0017\t\u0011\u0005-wq\u0017a\u0001\u0003\u0007Dqab1\u0006L\u0011\u0005Q)\u0001\u000bhKRdunZ!qa\u0016tG\rU8tSRLwN\u001c\u0005\t\u000f\u000f,Y\u0005\"\u0001\bJ\u0006yA.[:u\u0007>dG.Z2uS>t7/\u0006\u0002\bLB1qQZDo\u000fGtAab4\bZ:!q\u0011[Dl\u001b\t9\u0019NC\u0002\bV*\ta\u0001\u0010:p_Rt\u0014\"A\n\n\u0007\u001dm'#A\u0004qC\u000e\\\u0017mZ3\n\t\u001d}w\u0011\u001d\u0002\u0004'\u0016\f(bADn%A1\u0011Ca\u0014G\u0003\u0007D\u0001bb:\u0006L\u0011\u0005q\u0011^\u0001\u0011e\u0016lwN^3D_2dWm\u0019;j_:$Baa\u0016\bl\"9qQ^Ds\u0001\u00041\u0015!D2pY2,7\r^5p].+\u0017\u0010\u0003\u0005\br\u0016-C\u0011ADz\u0003=\u0019w\u000e\u001c7fGRLwN\\#naRLH\u0003BB,\u000fkDqa\"<\bp\u0002\u0007a\t\u0003\u0005\bz\u0016-C\u0011AD~\u0003Q!WmY8eKF+X-^3F]R\u0014\u00180T3uCR!!\u0011ID\u007f\u0011!\u0019\u0019hb>A\u0002\u001d}\b\u0003\u0002B\u0003\u0011\u0003IA\u0001c\u0001\u0003\u000e\t1q)\u001a;uKJD\u0001\u0002c\u0002\u0006L\u0011\u0005\u0001\u0012B\u0001\u0013O\u0016$H)\u001a7jm\u0016\u0014\u0018pQ8v]R,'\u000f\u0006\u0004\u0003B!-\u0001R\u0002\u0005\b\u000f[D)\u00011\u0001G\u0011\u001dAy\u0001#\u0002A\u0002\u0019\u000b1a]3r\u0011!A\u0019\"b\u0013\u0005\u0002!U\u0011aC9vKV,7)\u001e:t_J$b\u0001c\u0006\t*!-B\u0003BB,\u00113A\u0001b!'\t\u0012\u0001\u0007\u00012\u0004\t\b#\ru\u0005R\u0004B}!\u0011Ay\u0002#\n\u000e\u0005!\u0005\"b\u0001E\u0012\t\u000591m\\7nC:$\u0017\u0002\u0002E\u0014\u0011C\u0011q!T3tg\u0006<W\rC\u0004\bn\"E\u0001\u0019\u0001$\t\u000f!=\u0001\u0012\u0003a\u0001\r\"A\u0001rFC&\t\u0003A\t$A\tue\u0006t7/Y2uS>t7)\u001e:t_J$B\u0001c\r\t:Q!1q\u000bE\u001b\u0011!\u0019I\n#\fA\u0002!]\u0002CB\t\u0004\u001eB\u0011I\u0010C\u0004\bn\"5\u0002\u0019\u0001$\t\u0011!uR1\nC\u0001\u0011\u007f\tabZ3u\u0003\u000e\\\u0007k\\:ji&|g\u000eF\u0002G\u0011\u0003Bq\u0001c\u0011\t<\u0001\u0007a)\u0001\u0004tk\n\\U-\u001f\u0005\t\u0011\u000f*Y\u0005\"\u0001\tJ\u0005Qq-\u001a;NKN\u001c\u0018mZ3\u0015\t!u\u00012\n\u0005\b\u0011\u001bB)\u00051\u0001\u0011\u0003\u001dawnY1u_JD\u0001\u0002#\u0015\u0006L\u0011\u0005\u00012K\u0001\u000eI\u0016\u001cw\u000eZ3NKN\u001c\u0018mZ3\u0015\t!u\u0001R\u000b\u0005\t\u0011/By\u00051\u0001\u0002,\u0006\t\u0001\u0010\u0003\u0005\t\\\u0015-C\u0011\u0001E/\u0003A\u0019w\u000e\u001c7fGRLwN\\\"veN|'\u000f\u0006\u0004\t`!\u0015\u0004r\r\u000b\u0005\u0007/B\t\u0007\u0003\u0005\u0004\u001a\"e\u0003\u0019\u0001E2!%\tB\u0011AAV\u0005\u0007\u0011I\u0010C\u0004\bn\"e\u0003\u0019\u0001$\t\u0011!%\u0004\u0012\fa\u0001\u0003W\u000babY;sg>\u0014\bk\\:ji&|g\u000e\u0003\u0005\tn\u0015-C\u0011\u0001E8\u00039\u0019w\u000e\u001c7fGRLwN\\*ju\u0016$2A\u0012E9\u0011\u001d9i\u000fc\u001bA\u0002\u0019C\u0001\u0002#\u001e\u0006L\u0011\u0005\u0001rO\u0001\u0012G>dG.Z2uS>t\u0017j]#naRLH\u0003\u0002B}\u0011sBqa\"<\tt\u0001\u0007a\t\u0003\u0006\t~\u0015-#\u0019!C\u0001\u0011\u007f\n\u0011$\\1y?^\u0014\u0018\u000e^3`[\u0016\u001c8/Y4f?2\fG/\u001a8dsV\u00111Q\u0016\u0005\n\u0011\u0007+Y\u0005)A\u0005\u0007[\u000b!$\\1y?^\u0014\u0018\u000e^3`[\u0016\u001c8/Y4f?2\fG/\u001a8ds\u0002B!\u0002c\"\u0006L\t\u0007I\u0011\u0001E@\u0003ei\u0017\r_0xe&$XmX3ocV,W/Z0mCR,gnY=\t\u0013!-U1\nQ\u0001\n\r5\u0016AG7bq~;(/\u001b;f?\u0016t\u0017/^3vK~c\u0017\r^3oGf\u0004\u0003B\u0003EH\u000b\u0017\u0012\r\u0011\"\u0001\t\u0000\u00059R.\u0019=`S:$W\r_0xe&$Xm\u00187bi\u0016t7-\u001f\u0005\n\u0011'+Y\u0005)A\u0005\u0007[\u000b\u0001$\\1y?&tG-\u001a=`oJLG/Z0mCR,gnY=!\u0011!\u0019),b\u0013\u0005\u0002!]E\u0003BB,\u00113C\u0001\u0002c'\t\u0016\u0002\u0007\u0001RT\u0001\u0005k><8\u000f\u0005\u0003\u0012O\"}\u0005c\u0001\u0007\t\"&\u0019\u00012\u0015\u0002\u0003\u0019\u0011+G.Y=bE2,WkT,\t\u0011!\u001dV1\nC\u0001\u0011S\u000b!b\u001e:ji\u0016|Vo\\<t)!\u0011I\u0010c+\t.\"]\u0006\u0002\u0003EN\u0011K\u0003\r\u0001#(\t\u0011!=\u0006R\u0015a\u0001\u0011c\u000b\u0001\"\u00199qK:$WM\u001d\t\u0005\u000b\u0017C\u0019,\u0003\u0003\t6\u00165%a\u0003'pO\u0006\u0003\b/\u001a8eKJD\u0001\u0002#/\t&\u0002\u00071\u0011U\u0001\u0006E\u0006$8\r\u001b\u0005\t\u0011{+Y\u0005\"\u0001\t@\u0006!r-\u001a;D_2dWm\u0019;j_:,e\u000e\u001e:jKN$\u0002\u0002#1\tF\"\u001d\u00072\u001a\t\u0007\u000f\u001b<i\u000ec1\u0011\u000fE\u0011y%a+\u0003\u0004!9qQ\u001eE^\u0001\u00041\u0005b\u0002Ee\u0011w\u0003\rAR\u0001\tM&\u00148\u000f^*fc\"9\u0001R\u001aE^\u0001\u00041\u0015a\u00027bgR\u001cV-\u001d\u0005\t\u0011#,Y\u0005\"\u0001\tT\u0006!r-\u001a;MCN$\u0018+^3vK\u0016sGO]=TKF$2A\u0012Ek\u0011\u001d9i\u000fc4A\u0002\u0019C\u0001\u0002#7\u0006L\u0011\u0005\u00012\\\u0001\u001aO\u0016$H*Y:u\u0007>dG.Z2uS>tWI\u001c;ss.+\u0017\u0010\u0006\u0003\t^\"}\u0007#B\t\u0004@\u0005-\u0006bBDw\u0011/\u0004\rA\u0012\u0005\t\u0011G,Y\u0005\"\u0003\u0004V\u0005AB-\u001a;fGR|\u0016NZ0d_6\u0004\u0018m\u0019;`]\u0016,G-\u001a3\t\u0011!\u001dX1\nC\u0001\u0011S\f!aZ2\u0015\t\r]\u00032\u001e\u0005\t\u0011[D)\u000f1\u0001\tp\u0006qAo\u001c9jGB{7/\u001b;j_:\u001c\bCBDg\u000f;\u0014\t\bC\u0004\tt\u0016-C\u0011A#\u00021=dG-Z:u?J,G/Y5oK\u0012|6O\\1qg\"|G\u000f\u0003\u0005\tx\u0016-C\u0011\u0001E}\u0003-\u0011X-\\8wKBc\u0017n\u001d;\u0015\t\r]\u00032 \u0005\b\u000f[D)\u00101\u0001G\u0011!Ay0b\u0013\u0005\u0002%\u0005\u0011\u0001\u00039mSN$\b+\u001e;\u0015\r\r]\u00132AE\u0003\u0011\u001d\u0019)\u0005#@A\u0002\u0019Dqaa\u001d\t~\u0002\u0007a\r\u0003\u0005\n\n\u0015-C\u0011AE\u0006\u0003-\u0001H.[:u\t\u0016dW\r^3\u0015\t\r]\u0013R\u0002\u0005\b\u0007\u000bJ9\u00011\u0001g\u0011!I\t\"b\u0013\u0005\u0002%M\u0011\u0001\u00039mSN$x)\u001a;\u0015\t\ru\u0012R\u0003\u0005\b\u0007\u000bJy\u00011\u0001g\u0011!II\"b\u0013\u0005\u0002%m\u0011!\u00049mSN$\u0018\n^3sCR|'/\u0006\u0002\n\u001eA\u00191,c\b\n\u0007%\u0005BL\u0001\u0006E\u0005&#XM]1u_JD!\"#\n\u0006LE\u0005I\u0011AE\u0014\u0003]\u0019h.\u00199tQ>$\u0018J\u001c3fq\u0012\"WMZ1vYR$\u0013'\u0006\u0002\n*)\"!\u0011 C>\u0011)Ii#b\u0013\u0012\u0002\u0013\u0005\u0011rE\u0001\u0016e\u0016\u0004H.Y=`MJ|W\u000e\n3fM\u0006,H\u000e\u001e\u00134\u0011)I\t$b\u0013\u0012\u0002\u0013\u0005\u0011rE\u0001\u0015gR|'/\u001a+sC\u000e,G\u0005Z3gCVdG\u000f\n\u001a\t\u0015%UR1JI\u0001\n\u0003I9$A\nm_\u001e\u0014VMZ&fs\u0012\"WMZ1vYR$#'\u0006\u0002\n:)\"q\u0011\u0005C>\u0001")
public class LevelDBClient
{
    public final LevelDBStore org$apache$activemq$leveldb$LevelDBClient$$store;
    private final DispatchQueue dispatchQueue;
    private RecordLog log;
    private RichDB index;
    private RichDB plist;
    private Options indexOptions;
    private long lastIndexSnapshotPos;
    private final ReentrantReadWriteLock snapshotRwLock;
    private DBFactory factory;
    private final HashMap<Object, LongCounter> logRefs;
    private TreeMap<Object, Void> recoveryLogs;
    private final HashMap<Object, CollectionMeta> collectionMeta;
    private ExecutorService writeExecutor;
    private WriteBatch replay_write_batch;
    private long indexRecoveryPosition;
    private long stored_wal_append_position;
    private final TimeMetric max_write_message_latency;
    private final TimeMetric max_write_enqueue_latency;
    private final TimeMetric max_index_write_latency;
    
    public static void trace(final Throwable e) {
        LevelDBClient$.MODULE$.trace(e);
    }
    
    public static void trace(final Throwable e, final Function0<String> m, final Seq<Object> args) {
        LevelDBClient$.MODULE$.trace(e, m, args);
    }
    
    public static void trace(final Function0<String> m, final Seq<Object> args) {
        LevelDBClient$.MODULE$.trace(m, args);
    }
    
    public static void debug(final Throwable e) {
        LevelDBClient$.MODULE$.debug(e);
    }
    
    public static void debug(final Throwable e, final Function0<String> m, final Seq<Object> args) {
        LevelDBClient$.MODULE$.debug(e, m, args);
    }
    
    public static void debug(final Function0<String> m, final Seq<Object> args) {
        LevelDBClient$.MODULE$.debug(m, args);
    }
    
    public static void info(final Throwable e) {
        LevelDBClient$.MODULE$.info(e);
    }
    
    public static void info(final Throwable e, final Function0<String> m, final Seq<Object> args) {
        LevelDBClient$.MODULE$.info(e, m, args);
    }
    
    public static void info(final Function0<String> m, final Seq<Object> args) {
        LevelDBClient$.MODULE$.info(m, args);
    }
    
    public static void warn(final Throwable e) {
        LevelDBClient$.MODULE$.warn(e);
    }
    
    public static void warn(final Throwable e, final Function0<String> m, final Seq<Object> args) {
        LevelDBClient$.MODULE$.warn(e, m, args);
    }
    
    public static void warn(final Function0<String> m, final Seq<Object> args) {
        LevelDBClient$.MODULE$.warn(m, args);
    }
    
    public static void error(final Throwable e) {
        LevelDBClient$.MODULE$.error(e);
    }
    
    public static void error(final Throwable e, final Function0<String> m, final Seq<Object> args) {
        LevelDBClient$.MODULE$.error(e, m, args);
    }
    
    public static void error(final Function0<String> m, final Seq<Object> args) {
        LevelDBClient$.MODULE$.error(m, args);
    }
    
    public static void org$apache$activemq$leveldb$util$Log$_setter_$log_$eq(final Logger x$1) {
        LevelDBClient$.MODULE$.org$apache$activemq$leveldb$util$Log$_setter_$log_$eq(x$1);
    }
    
    public static void copyIndex(final File from, final File to) {
        LevelDBClient$.MODULE$.copyIndex(from, to);
    }
    
    public static scala.collection.immutable.TreeMap<Object, File> find_sequence_files(final File directory, final String suffix) {
        return LevelDBClient$.MODULE$.find_sequence_files(directory, suffix);
    }
    
    public static File create_sequence_file(final File directory, final long id, final String suffix) {
        return LevelDBClient$.MODULE$.create_sequence_file(directory, id, suffix);
    }
    
    public static byte[] bytes(final String value) {
        return LevelDBClient$.MODULE$.bytes(value);
    }
    
    public static Tuple3<Object, Object, Buffer> decodeEntryKey(final byte[] bytes) {
        return LevelDBClient$.MODULE$.decodeEntryKey(bytes);
    }
    
    public static byte[] encodeEntryKey(final byte a1, final long a2, final Buffer a3) {
        return LevelDBClient$.MODULE$.encodeEntryKey(a1, a2, a3);
    }
    
    public static byte[] encodeEntryKey(final byte a1, final long a2, final long a3) {
        return LevelDBClient$.MODULE$.encodeEntryKey(a1, a2, a3);
    }
    
    public static long decodeLong(final byte[] bytes) {
        return LevelDBClient$.MODULE$.decodeLong(bytes);
    }
    
    public static long decodeLong(final Buffer bytes) {
        return LevelDBClient$.MODULE$.decodeLong(bytes);
    }
    
    public static Tuple2<Object, Object> decodeLongKey(final byte[] bytes) {
        return LevelDBClient$.MODULE$.decodeLongKey(bytes);
    }
    
    public static byte[] encodeLongKey(final byte a1, final long a2) {
        return LevelDBClient$.MODULE$.encodeLongKey(a1, a2);
    }
    
    public static long decodeVLong(final byte[] bytes) {
        return LevelDBClient$.MODULE$.decodeVLong(bytes);
    }
    
    public static byte[] encodeVLong(final long a1) {
        return LevelDBClient$.MODULE$.encodeVLong(a1);
    }
    
    public static Buffer encodeLong(final long a1) {
        return LevelDBClient$.MODULE$.encodeLong(a1);
    }
    
    public static Tuple2<Object, Object> decodeLongLong(final byte[] bytes) {
        return LevelDBClient$.MODULE$.decodeLongLong(bytes);
    }
    
    public static Buffer encodeLongLong(final long a1, final long a2) {
        return LevelDBClient$.MODULE$.encodeLongLong(a1, a2);
    }
    
    public static Tuple2<Object, Object> decodeLocator(final byte[] bytes) {
        return LevelDBClient$.MODULE$.decodeLocator(bytes);
    }
    
    public static Tuple2<Object, Object> decodeLocator(final Buffer bytes) {
        return LevelDBClient$.MODULE$.decodeLocator(bytes);
    }
    
    public static byte[] encodeLocator(final long pos, final int len) {
        return LevelDBClient$.MODULE$.encodeLocator(pos, len);
    }
    
    public static EntryKey.Buffer decodeEntryKeyRecord(final Buffer data) {
        return LevelDBClient$.MODULE$.decodeEntryKeyRecord(data);
    }
    
    public static byte[] encodeEntryKeyRecord(final EntryKey.Buffer v) {
        return LevelDBClient$.MODULE$.encodeEntryKeyRecord(v);
    }
    
    public static EntryRecord.Buffer decodeEntryRecord(final Buffer data) {
        return LevelDBClient$.MODULE$.decodeEntryRecord(data);
    }
    
    public static Buffer encodeEntryRecord(final EntryRecord.Buffer v) {
        return LevelDBClient$.MODULE$.encodeEntryRecord(v);
    }
    
    public static CollectionKey.Buffer decodeCollectionKeyRecord(final Buffer data) {
        return LevelDBClient$.MODULE$.decodeCollectionKeyRecord(data);
    }
    
    public static byte[] encodeCollectionKeyRecord(final CollectionKey.Buffer v) {
        return LevelDBClient$.MODULE$.encodeCollectionKeyRecord(v);
    }
    
    public static CollectionRecord.Buffer decodeCollectionRecord(final Buffer data) {
        return LevelDBClient$.MODULE$.decodeCollectionRecord(data);
    }
    
    public static byte[] encodeCollectionRecord(final CollectionRecord.Buffer v) {
        return LevelDBClient$.MODULE$.encodeCollectionRecord(v);
    }
    
    public static Buffer toBuffer(final byte[] buffer) {
        return LevelDBClient$.MODULE$.toBuffer(buffer);
    }
    
    public static byte[] toByteArray(final Buffer buffer) {
        return LevelDBClient$.MODULE$.toByteArray(buffer);
    }
    
    public static String INDEX_SUFFIX() {
        return LevelDBClient$.MODULE$.INDEX_SUFFIX();
    }
    
    public static String LOG_SUFFIX() {
        return LevelDBClient$.MODULE$.LOG_SUFFIX();
    }
    
    public static byte LOG_UPDATE_ENTRY() {
        return LevelDBClient$.MODULE$.LOG_UPDATE_ENTRY();
    }
    
    public static byte LOG_TRACE() {
        return LevelDBClient$.MODULE$.LOG_TRACE();
    }
    
    public static byte LOG_DATA() {
        return LevelDBClient$.MODULE$.LOG_DATA();
    }
    
    public static byte LOG_REMOVE_ENTRY() {
        return LevelDBClient$.MODULE$.LOG_REMOVE_ENTRY();
    }
    
    public static byte LOG_ADD_ENTRY() {
        return LevelDBClient$.MODULE$.LOG_ADD_ENTRY();
    }
    
    public static byte LOG_REMOVE_COLLECTION() {
        return LevelDBClient$.MODULE$.LOG_REMOVE_COLLECTION();
    }
    
    public static byte LOG_ADD_COLLECTION() {
        return LevelDBClient$.MODULE$.LOG_ADD_COLLECTION();
    }
    
    public static byte[] ENTRY_PREFIX_ARRAY() {
        return LevelDBClient$.MODULE$.ENTRY_PREFIX_ARRAY();
    }
    
    public static byte ENTRY_PREFIX() {
        return LevelDBClient$.MODULE$.ENTRY_PREFIX();
    }
    
    public static byte[] COLLECTION_PREFIX_ARRAY() {
        return LevelDBClient$.MODULE$.COLLECTION_PREFIX_ARRAY();
    }
    
    public static byte COLLECTION_PREFIX() {
        return LevelDBClient$.MODULE$.COLLECTION_PREFIX();
    }
    
    public static AsciiBuffer ACK_POSITION() {
        return LevelDBClient$.MODULE$.ACK_POSITION();
    }
    
    public static byte[] FALSE() {
        return LevelDBClient$.MODULE$.FALSE();
    }
    
    public static byte[] TRUE() {
        return LevelDBClient$.MODULE$.TRUE();
    }
    
    public static byte[] COLLECTION_META_KEY() {
        return LevelDBClient$.MODULE$.COLLECTION_META_KEY();
    }
    
    public static byte[] PRODUCER_IDS_INDEX_KEY() {
        return LevelDBClient$.MODULE$.PRODUCER_IDS_INDEX_KEY();
    }
    
    public static byte[] LOGS_INDEX_KEY() {
        return LevelDBClient$.MODULE$.LOGS_INDEX_KEY();
    }
    
    public static byte[] LOG_REF_INDEX_KEY() {
        return LevelDBClient$.MODULE$.LOG_REF_INDEX_KEY();
    }
    
    public static byte[] DIRTY_INDEX_KEY() {
        return LevelDBClient$.MODULE$.DIRTY_INDEX_KEY();
    }
    
    public static WriteOptions PLIST_WRITE_OPTIONS() {
        return LevelDBClient$.MODULE$.PLIST_WRITE_OPTIONS();
    }
    
    public static ThreadPoolExecutor THREAD_POOL() {
        return LevelDBClient$.MODULE$.THREAD_POOL();
    }
    
    public static long THREAD_POOL_STACK_SIZE() {
        return LevelDBClient$.MODULE$.THREAD_POOL_STACK_SIZE();
    }
    
    public static int STORE_SCHEMA_VERSION() {
        return LevelDBClient$.MODULE$.STORE_SCHEMA_VERSION();
    }
    
    public static String STORE_SCHEMA_PREFIX() {
        return LevelDBClient$.MODULE$.STORE_SCHEMA_PREFIX();
    }
    
    public DispatchQueue dispatchQueue() {
        return this.dispatchQueue;
    }
    
    public File directory() {
        return this.org$apache$activemq$leveldb$LevelDBClient$$store.directory();
    }
    
    public File logDirectory() {
        return (File)Option$.MODULE$.apply((Object)this.org$apache$activemq$leveldb$LevelDBClient$$store.logDirectory()).getOrElse((Function0)new LevelDBClient$$anonfun$logDirectory.LevelDBClient$$anonfun$logDirectory$1(this));
    }
    
    public boolean sync() {
        return this.org$apache$activemq$leveldb$LevelDBClient$$store.sync();
    }
    
    public boolean verifyChecksums() {
        return this.org$apache$activemq$leveldb$LevelDBClient$$store.verifyChecksums();
    }
    
    public RecordLog log() {
        return this.log;
    }
    
    public void log_$eq(final RecordLog x$1) {
        this.log = x$1;
    }
    
    public RichDB index() {
        return this.index;
    }
    
    public void index_$eq(final RichDB x$1) {
        this.index = x$1;
    }
    
    public RichDB plist() {
        return this.plist;
    }
    
    public void plist_$eq(final RichDB x$1) {
        this.plist = x$1;
    }
    
    public Options indexOptions() {
        return this.indexOptions;
    }
    
    public void indexOptions_$eq(final Options x$1) {
        this.indexOptions = x$1;
    }
    
    public long lastIndexSnapshotPos() {
        return this.lastIndexSnapshotPos;
    }
    
    public void lastIndexSnapshotPos_$eq(final long x$1) {
        this.lastIndexSnapshotPos = x$1;
    }
    
    public ReentrantReadWriteLock snapshotRwLock() {
        return this.snapshotRwLock;
    }
    
    public DBFactory factory() {
        return this.factory;
    }
    
    public void factory_$eq(final DBFactory x$1) {
        this.factory = x$1;
    }
    
    public HashMap<Object, LongCounter> logRefs() {
        return this.logRefs;
    }
    
    public TreeMap<Object, Void> recoveryLogs() {
        return this.recoveryLogs;
    }
    
    public void recoveryLogs_$eq(final TreeMap<Object, Void> x$1) {
        this.recoveryLogs = x$1;
    }
    
    public HashMap<Object, CollectionMeta> collectionMeta() {
        return this.collectionMeta;
    }
    
    public File plistIndexFile() {
        return FileSupport$.MODULE$.toRichFile(this.directory()).$div("plist.index");
    }
    
    public File dirtyIndexFile() {
        return FileSupport$.MODULE$.toRichFile(this.directory()).$div("dirty.index");
    }
    
    public File tempIndexFile() {
        return FileSupport$.MODULE$.toRichFile(this.directory()).$div("temp.index");
    }
    
    public File snapshotIndexFile(final long id) {
        return LevelDBClient$.MODULE$.create_sequence_file(this.directory(), id, ".index");
    }
    
    public long size() {
        return this.logRefs().size() * this.org$apache$activemq$leveldb$LevelDBClient$$store.logSize();
    }
    
    public RecordLog createLog() {
        return new RecordLog(this.logDirectory(), ".log");
    }
    
    public ExecutorService writeExecutor() {
        return this.writeExecutor;
    }
    
    public void writeExecutor_$eq(final ExecutorService x$1) {
        this.writeExecutor = x$1;
    }
    
    public void writeExecutorExec(final Function0<BoxedUnit> func) {
        package$.MODULE$.ExecutorWrapper((Executor)this.writeExecutor()).apply((Function0)func);
    }
    
    public void storeTrace(final String ascii, final boolean force) {
        this.assert_write_thread_executing();
        final String time = new SimpleDateFormat("dd/MMM/yyyy:HH:mm::ss Z").format(new Date());
        this.log().appender((scala.Function1<RecordLog.LogAppender, Object>)new LevelDBClient$$anonfun$storeTrace.LevelDBClient$$anonfun$storeTrace$1(this, ascii, force, time));
    }
    
    public <T> T might_fail(final Function0<T> func) {
        try {
            return (T)func.apply();
        }
        catch (IOException e) {
            throw this.handleFailure$1(e);
        }
        finally {
            final Throwable cause;
            throw this.handleFailure$1(IOExceptionSupport.create(cause));
        }
    }
    
    public void start() {
        this.init();
        this.replay_init();
        this.might_fail((scala.Function0<Object>)new LevelDBClient$$anonfun$start.LevelDBClient$$anonfun$start$1(this));
        this.replay_from(this.lastIndexSnapshotPos(), this.log().appender_limit(), this.replay_from$default$3());
        this.replay_write_batch_$eq(null);
    }
    
    public void assert_write_thread_executing() {
        final Predef$ module$ = Predef$.MODULE$;
        final Class<? extends Thread> class1 = Thread.currentThread().getClass();
        final Class<WriteThread> obj = WriteThread.class;
        boolean b = false;
        Label_0037: {
            Label_0036: {
                if (class1 == null) {
                    if (obj != null) {
                        break Label_0036;
                    }
                }
                else if (!class1.equals(obj)) {
                    break Label_0036;
                }
                b = true;
                break Label_0037;
            }
            b = false;
        }
        module$.assert(b);
    }
    
    public void init() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.directory:()Ljava/io/File;
        //     4: invokevirtual   java/io/File.mkdirs:()Z
        //     7: pop            
        //     8: getstatic       org/apache/activemq/leveldb/util/FileSupport$.MODULE$:Lorg/apache/activemq/leveldb/util/FileSupport$;
        //    11: aload_0         /* this */
        //    12: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.directory:()Ljava/io/File;
        //    15: invokevirtual   org/apache/activemq/leveldb/util/FileSupport$.toRichFile:(Ljava/io/File;)Lorg/apache/activemq/leveldb/util/FileSupport$RichFile;
        //    18: ldc_w           "store-version.txt"
        //    21: invokevirtual   org/apache/activemq/leveldb/util/FileSupport$RichFile.$div:(Ljava/lang/String;)Ljava/io/File;
        //    24: astore_1        /* version_file */
        //    25: aload_1         /* version_file */
        //    26: invokevirtual   java/io/File.exists:()Z
        //    29: ifeq            147
        //    32: getstatic       org/apache/activemq/leveldb/util/FileSupport$.MODULE$:Lorg/apache/activemq/leveldb/util/FileSupport$;
        //    35: aload_1         /* version_file */
        //    36: invokevirtual   org/apache/activemq/leveldb/util/FileSupport$.toRichFile:(Ljava/io/File;)Lorg/apache/activemq/leveldb/util/FileSupport$RichFile;
        //    39: astore          qual$1
        //    41: aload           qual$1
        //    43: invokevirtual   org/apache/activemq/leveldb/util/FileSupport$RichFile.readText$default$1:()Ljava/lang/String;
        //    46: astore          x$22
        //    48: aload           qual$1
        //    50: aload           x$22
        //    52: invokevirtual   org/apache/activemq/leveldb/util/FileSupport$RichFile.readText:(Ljava/lang/String;)Ljava/lang/String;
        //    55: invokevirtual   java/lang/String.trim:()Ljava/lang/String;
        //    58: astore          tmp
        //    60: aload           tmp
        //    62: ldc_w           "activemq_leveldb_store:"
        //    65: invokevirtual   java/lang/String.startsWith:(Ljava/lang/String;)Z
        //    68: ifeq            111
        //    71: new             Lscala/collection/immutable/StringOps;
        //    74: dup            
        //    75: getstatic       scala/Predef$.MODULE$:Lscala/Predef$;
        //    78: new             Lscala/collection/immutable/StringOps;
        //    81: dup            
        //    82: getstatic       scala/Predef$.MODULE$:Lscala/Predef$;
        //    85: aload           tmp
        //    87: invokevirtual   scala/Predef$.augmentString:(Ljava/lang/String;)Ljava/lang/String;
        //    90: invokespecial   scala/collection/immutable/StringOps.<init>:(Ljava/lang/String;)V
        //    93: ldc_w           "activemq_leveldb_store:"
        //    96: invokevirtual   scala/collection/immutable/StringOps.stripPrefix:(Ljava/lang/String;)Ljava/lang/String;
        //    99: invokevirtual   scala/Predef$.augmentString:(Ljava/lang/String;)Ljava/lang/String;
        //   102: invokespecial   scala/collection/immutable/StringOps.<init>:(Ljava/lang/String;)V
        //   105: invokevirtual   scala/collection/immutable/StringOps.toInt:()I
        //   108: goto            112
        //   111: iconst_m1      
        //   112: istore_2        /* ver */
        //   113: iload_2         /* ver */
        //   114: istore          7
        //   116: iload           7
        //   118: tableswitch {
        //                2: 147
        //          default: 136
        //        }
        //   136: new             Ljava/lang/Exception;
        //   139: dup            
        //   140: ldc_w           "Cannot open the store.  It's schema version is not supported."
        //   143: invokespecial   java/lang/Exception.<init>:(Ljava/lang/String;)V
        //   146: athrow         
        //   147: getstatic       org/apache/activemq/leveldb/util/FileSupport$.MODULE$:Lorg/apache/activemq/leveldb/util/FileSupport$;
        //   150: aload_1         /* version_file */
        //   151: invokevirtual   org/apache/activemq/leveldb/util/FileSupport$.toRichFile:(Ljava/io/File;)Lorg/apache/activemq/leveldb/util/FileSupport$RichFile;
        //   154: astore          qual$2
        //   156: new             Lscala/collection/mutable/StringBuilder;
        //   159: dup            
        //   160: invokespecial   scala/collection/mutable/StringBuilder.<init>:()V
        //   163: ldc_w           "activemq_leveldb_store:"
        //   166: invokevirtual   scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
        //   169: iconst_1       
        //   170: invokestatic    scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
        //   173: invokevirtual   scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
        //   176: invokevirtual   scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
        //   179: astore          x$23
        //   181: aload           qual$2
        //   183: invokevirtual   org/apache/activemq/leveldb/util/FileSupport$RichFile.writeText$default$2:()Ljava/lang/String;
        //   186: astore          x$24
        //   188: aload           qual$2
        //   190: aload           x$23
        //   192: aload           x$24
        //   194: invokevirtual   org/apache/activemq/leveldb/util/FileSupport$RichFile.writeText:(Ljava/lang/String;Ljava/lang/String;)V
        //   197: aload_0         /* this */
        //   198: iconst_1       
        //   199: new             Lorg/apache/activemq/leveldb/LevelDBClient$$anon$3;
        //   202: dup            
        //   203: aload_0         /* this */
        //   204: invokespecial   org/apache/activemq/leveldb/LevelDBClient$$anon$3.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient;)V
        //   207: invokestatic    java/util/concurrent/Executors.newFixedThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;
        //   210: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.writeExecutor_$eq:(Ljava/util/concurrent/ExecutorService;)V
        //   213: aload_0         /* this */
        //   214: getfield        org/apache/activemq/leveldb/LevelDBClient.org$apache$activemq$leveldb$LevelDBClient$$store:Lorg/apache/activemq/leveldb/LevelDBStore;
        //   217: invokevirtual   org/apache/activemq/leveldb/LevelDBStore.indexFactory:()Ljava/lang/String;
        //   220: astore          factoryNames
        //   222: aload_0         /* this */
        //   223: getstatic       scala/Predef$.MODULE$:Lscala/Predef$;
        //   226: getstatic       scala/Predef$.MODULE$:Lscala/Predef$;
        //   229: getstatic       scala/Predef$.MODULE$:Lscala/Predef$;
        //   232: aload           factoryNames
        //   234: ldc_w           "(,|\\s)+"
        //   237: invokevirtual   java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
        //   240: checkcast       [Ljava/lang/Object;
        //   243: invokevirtual   scala/Predef$.refArrayOps:([Ljava/lang/Object;)Lscala/collection/mutable/ArrayOps;
        //   246: new             Lorg/apache/activemq/leveldb/LevelDBClient$$anonfun$init$2;
        //   249: dup            
        //   250: aload_0         /* this */
        //   251: invokespecial   org/apache/activemq/leveldb/LevelDBClient$$anonfun$init$2.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient;)V
        //   254: getstatic       scala/Array$.MODULE$:Lscala/Array$;
        //   257: getstatic       scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
        //   260: ldc_w           Ljava/lang/String;.class
        //   263: invokevirtual   scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
        //   266: invokevirtual   scala/Array$.canBuildFrom:(Lscala/reflect/ClassTag;)Lscala/collection/generic/CanBuildFrom;
        //   269: invokeinterface scala/collection/mutable/ArrayOps.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
        //   274: checkcast       [Ljava/lang/Object;
        //   277: invokevirtual   scala/Predef$.refArrayOps:([Ljava/lang/Object;)Lscala/collection/mutable/ArrayOps;
        //   280: new             Lorg/apache/activemq/leveldb/LevelDBClient$$anonfun$init$3;
        //   283: dup            
        //   284: aload_0         /* this */
        //   285: invokespecial   org/apache/activemq/leveldb/LevelDBClient$$anonfun$init$3.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient;)V
        //   288: getstatic       scala/Array$.MODULE$:Lscala/Array$;
        //   291: getstatic       scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
        //   294: ldc_w           Lorg/iq80/leveldb/DBFactory;.class
        //   297: invokevirtual   scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
        //   300: invokevirtual   scala/Array$.canBuildFrom:(Lscala/reflect/ClassTag;)Lscala/collection/generic/CanBuildFrom;
        //   303: invokeinterface scala/collection/mutable/ArrayOps.flatMap:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
        //   308: checkcast       [Ljava/lang/Object;
        //   311: invokevirtual   scala/Predef$.refArrayOps:([Ljava/lang/Object;)Lscala/collection/mutable/ArrayOps;
        //   314: invokeinterface scala/collection/mutable/ArrayOps.headOption:()Lscala/Option;
        //   319: new             Lorg/apache/activemq/leveldb/LevelDBClient$$anonfun$init$4;
        //   322: dup            
        //   323: aload_0         /* this */
        //   324: aload           factoryNames
        //   326: invokespecial   org/apache/activemq/leveldb/LevelDBClient$$anonfun$init$4.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient;Ljava/lang/String;)V
        //   329: invokevirtual   scala/Option.getOrElse:(Lscala/Function0;)Ljava/lang/Object;
        //   332: checkcast       Lorg/iq80/leveldb/DBFactory;
        //   335: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.factory_$eq:(Lorg/iq80/leveldb/DBFactory;)V
        //   338: aload_0         /* this */
        //   339: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.factory:()Lorg/iq80/leveldb/DBFactory;
        //   342: invokevirtual   java/lang/Object.getClass:()Ljava/lang/Class;
        //   345: invokevirtual   java/lang/Class.getName:()Ljava/lang/String;
        //   348: ldc_w           "org.iq80.leveldb.impl.Iq80DBFactory"
        //   351: astore          12
        //   353: dup            
        //   354: ifnonnull       366
        //   357: pop            
        //   358: aload           12
        //   360: ifnull          374
        //   363: goto            398
        //   366: aload           12
        //   368: invokevirtual   java/lang/Object.equals:(Ljava/lang/Object;)Z
        //   371: ifeq            398
        //   374: getstatic       org/apache/activemq/leveldb/LevelDBClient$.MODULE$:Lorg/apache/activemq/leveldb/LevelDBClient$;
        //   377: new             Lorg/apache/activemq/leveldb/LevelDBClient$$anonfun$init$5;
        //   380: dup            
        //   381: aload_0         /* this */
        //   382: invokespecial   org/apache/activemq/leveldb/LevelDBClient$$anonfun$init$5.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient;)V
        //   385: getstatic       scala/Predef$.MODULE$:Lscala/Predef$;
        //   388: iconst_0       
        //   389: anewarray       Ljava/lang/Object;
        //   392: invokevirtual   scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
        //   395: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$.info:(Lscala/Function0;Lscala/collection/Seq;)V
        //   398: aload_0         /* this */
        //   399: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.factory:()Lorg/iq80/leveldb/DBFactory;
        //   402: invokevirtual   java/lang/Object.getClass:()Ljava/lang/Class;
        //   405: invokevirtual   java/lang/Class.getName:()Ljava/lang/String;
        //   408: ldc_w           "org.fusesource.leveldbjni.JniDBFactory"
        //   411: astore          13
        //   413: dup            
        //   414: ifnonnull       426
        //   417: pop            
        //   418: aload           13
        //   420: ifnull          434
        //   423: goto            458
        //   426: aload           13
        //   428: invokevirtual   java/lang/Object.equals:(Ljava/lang/Object;)Z
        //   431: ifeq            458
        //   434: getstatic       org/apache/activemq/leveldb/LevelDBClient$.MODULE$:Lorg/apache/activemq/leveldb/LevelDBClient$;
        //   437: new             Lorg/apache/activemq/leveldb/LevelDBClient$$anonfun$init$6;
        //   440: dup            
        //   441: aload_0         /* this */
        //   442: invokespecial   org/apache/activemq/leveldb/LevelDBClient$$anonfun$init$6.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient;)V
        //   445: getstatic       scala/Predef$.MODULE$:Lscala/Predef$;
        //   448: iconst_0       
        //   449: anewarray       Ljava/lang/Object;
        //   452: invokevirtual   scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
        //   455: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$.info:(Lscala/Function0;Lscala/collection/Seq;)V
        //   458: aload_0         /* this */
        //   459: new             Lorg/iq80/leveldb/Options;
        //   462: dup            
        //   463: invokespecial   org/iq80/leveldb/Options.<init>:()V
        //   466: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.indexOptions_$eq:(Lorg/iq80/leveldb/Options;)V
        //   469: aload_0         /* this */
        //   470: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.indexOptions:()Lorg/iq80/leveldb/Options;
        //   473: iconst_1       
        //   474: invokevirtual   org/iq80/leveldb/Options.createIfMissing:(Z)Lorg/iq80/leveldb/Options;
        //   477: pop            
        //   478: aload_0         /* this */
        //   479: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.indexOptions:()Lorg/iq80/leveldb/Options;
        //   482: aload_0         /* this */
        //   483: getfield        org/apache/activemq/leveldb/LevelDBClient.org$apache$activemq$leveldb$LevelDBClient$$store:Lorg/apache/activemq/leveldb/LevelDBStore;
        //   486: invokevirtual   org/apache/activemq/leveldb/LevelDBStore.indexMaxOpenFiles:()I
        //   489: invokevirtual   org/iq80/leveldb/Options.maxOpenFiles:(I)Lorg/iq80/leveldb/Options;
        //   492: pop            
        //   493: aload_0         /* this */
        //   494: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.indexOptions:()Lorg/iq80/leveldb/Options;
        //   497: aload_0         /* this */
        //   498: getfield        org/apache/activemq/leveldb/LevelDBClient.org$apache$activemq$leveldb$LevelDBClient$$store:Lorg/apache/activemq/leveldb/LevelDBStore;
        //   501: invokevirtual   org/apache/activemq/leveldb/LevelDBStore.indexBlockRestartInterval:()I
        //   504: invokevirtual   org/iq80/leveldb/Options.blockRestartInterval:(I)Lorg/iq80/leveldb/Options;
        //   507: pop            
        //   508: aload_0         /* this */
        //   509: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.indexOptions:()Lorg/iq80/leveldb/Options;
        //   512: aload_0         /* this */
        //   513: getfield        org/apache/activemq/leveldb/LevelDBClient.org$apache$activemq$leveldb$LevelDBClient$$store:Lorg/apache/activemq/leveldb/LevelDBStore;
        //   516: invokevirtual   org/apache/activemq/leveldb/LevelDBStore.paranoidChecks:()Z
        //   519: invokevirtual   org/iq80/leveldb/Options.paranoidChecks:(Z)Lorg/iq80/leveldb/Options;
        //   522: pop            
        //   523: aload_0         /* this */
        //   524: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.indexOptions:()Lorg/iq80/leveldb/Options;
        //   527: aload_0         /* this */
        //   528: getfield        org/apache/activemq/leveldb/LevelDBClient.org$apache$activemq$leveldb$LevelDBClient$$store:Lorg/apache/activemq/leveldb/LevelDBStore;
        //   531: invokevirtual   org/apache/activemq/leveldb/LevelDBStore.indexWriteBufferSize:()I
        //   534: invokevirtual   org/iq80/leveldb/Options.writeBufferSize:(I)Lorg/iq80/leveldb/Options;
        //   537: pop            
        //   538: aload_0         /* this */
        //   539: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.indexOptions:()Lorg/iq80/leveldb/Options;
        //   542: aload_0         /* this */
        //   543: getfield        org/apache/activemq/leveldb/LevelDBClient.org$apache$activemq$leveldb$LevelDBClient$$store:Lorg/apache/activemq/leveldb/LevelDBStore;
        //   546: invokevirtual   org/apache/activemq/leveldb/LevelDBStore.indexBlockSize:()I
        //   549: invokevirtual   org/iq80/leveldb/Options.blockSize:(I)Lorg/iq80/leveldb/Options;
        //   552: pop            
        //   553: aload_0         /* this */
        //   554: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.indexOptions:()Lorg/iq80/leveldb/Options;
        //   557: aload_0         /* this */
        //   558: getfield        org/apache/activemq/leveldb/LevelDBClient.org$apache$activemq$leveldb$LevelDBClient$$store:Lorg/apache/activemq/leveldb/LevelDBStore;
        //   561: invokevirtual   org/apache/activemq/leveldb/LevelDBStore.indexCompression:()Ljava/lang/String;
        //   564: invokevirtual   java/lang/String.toLowerCase:()Ljava/lang/String;
        //   567: astore          14
        //   569: ldc_w           "snappy"
        //   572: aload           14
        //   574: invokevirtual   java/lang/Object.equals:(Ljava/lang/Object;)Z
        //   577: ifeq            588
        //   580: getstatic       org/iq80/leveldb/CompressionType.SNAPPY:Lorg/iq80/leveldb/CompressionType;
        //   583: astore          15
        //   585: goto            612
        //   588: ldc_w           "none"
        //   591: aload           14
        //   593: invokevirtual   java/lang/Object.equals:(Ljava/lang/Object;)Z
        //   596: ifeq            607
        //   599: getstatic       org/iq80/leveldb/CompressionType.NONE:Lorg/iq80/leveldb/CompressionType;
        //   602: astore          15
        //   604: goto            612
        //   607: getstatic       org/iq80/leveldb/CompressionType.SNAPPY:Lorg/iq80/leveldb/CompressionType;
        //   610: astore          15
        //   612: aload           15
        //   614: invokevirtual   org/iq80/leveldb/Options.compressionType:(Lorg/iq80/leveldb/CompressionType;)Lorg/iq80/leveldb/Options;
        //   617: pop            
        //   618: aload_0         /* this */
        //   619: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.indexOptions:()Lorg/iq80/leveldb/Options;
        //   622: aload_0         /* this */
        //   623: getfield        org/apache/activemq/leveldb/LevelDBClient.org$apache$activemq$leveldb$LevelDBClient$$store:Lorg/apache/activemq/leveldb/LevelDBStore;
        //   626: invokevirtual   org/apache/activemq/leveldb/LevelDBStore.indexCacheSize:()J
        //   629: invokevirtual   org/iq80/leveldb/Options.cacheSize:(J)Lorg/iq80/leveldb/Options;
        //   632: pop            
        //   633: aload_0         /* this */
        //   634: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.indexOptions:()Lorg/iq80/leveldb/Options;
        //   637: new             Lorg/apache/activemq/leveldb/LevelDBClient$$anon$4;
        //   640: dup            
        //   641: aload_0         /* this */
        //   642: invokespecial   org/apache/activemq/leveldb/LevelDBClient$$anon$4.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient;)V
        //   645: invokevirtual   org/iq80/leveldb/Options.logger:(Lorg/iq80/leveldb/Logger;)Lorg/iq80/leveldb/Options;
        //   648: pop            
        //   649: aload_0         /* this */
        //   650: aload_0         /* this */
        //   651: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.createLog:()Lorg/apache/activemq/leveldb/RecordLog;
        //   654: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.log_$eq:(Lorg/apache/activemq/leveldb/RecordLog;)V
        //   657: aload_0         /* this */
        //   658: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.log:()Lorg/apache/activemq/leveldb/RecordLog;
        //   661: aload_0         /* this */
        //   662: getfield        org/apache/activemq/leveldb/LevelDBClient.org$apache$activemq$leveldb$LevelDBClient$$store:Lorg/apache/activemq/leveldb/LevelDBStore;
        //   665: invokevirtual   org/apache/activemq/leveldb/LevelDBStore.logSize:()J
        //   668: invokevirtual   org/apache/activemq/leveldb/RecordLog.logSize_$eq:(J)V
        //   671: aload_0         /* this */
        //   672: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.log:()Lorg/apache/activemq/leveldb/RecordLog;
        //   675: new             Lorg/apache/activemq/leveldb/LevelDBClient$$anonfun$init$1;
        //   678: dup            
        //   679: aload_0         /* this */
        //   680: invokespecial   org/apache/activemq/leveldb/LevelDBClient$$anonfun$init$1.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient;)V
        //   683: invokevirtual   org/apache/activemq/leveldb/RecordLog.on_log_rotate_$eq:(Lscala/Function0;)V
        //   686: return         
        //   687: astore_3       
        //   688: new             Ljava/lang/Exception;
        //   691: dup            
        //   692: new             Lscala/collection/mutable/StringBuilder;
        //   695: dup            
        //   696: invokespecial   scala/collection/mutable/StringBuilder.<init>:()V
        //   699: ldc_w           "Unexpected version file format: "
        //   702: invokevirtual   scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
        //   705: aload_1        
        //   706: invokevirtual   scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
        //   709: invokevirtual   scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
        //   712: invokespecial   java/lang/Exception.<init>:(Ljava/lang/String;)V
        //   715: athrow         
        //    StackMapTable: 00 0E FF 00 6F 00 07 07 00 02 07 01 45 00 00 07 02 3F 07 01 84 07 02 3F 00 00 40 01 FF 00 17 00 08 07 00 02 07 01 45 01 00 07 02 3F 07 01 84 07 02 3F 01 00 00 FF 00 0A 00 02 07 00 02 07 01 45 00 00 FF 00 DA 00 0D 07 00 02 07 01 45 00 00 00 00 00 00 07 01 84 07 02 3F 07 02 3F 07 02 3F 07 02 3F 00 01 07 02 3F 07 17 FF 00 1B 00 0E 07 00 02 07 01 45 00 00 00 00 00 00 07 01 84 07 02 3F 07 02 3F 07 02 3F 07 02 3F 07 02 3F 00 01 07 02 3F 07 17 FF 00 81 00 0F 07 00 02 07 01 45 00 00 00 00 00 00 07 01 84 07 02 3F 07 02 3F 07 02 3F 07 02 3F 07 02 3F 07 02 3F 00 01 07 02 CC 52 07 02 CC FF 00 04 00 10 07 00 02 07 01 45 00 00 00 00 00 00 07 01 84 07 02 3F 07 02 3F 07 02 3F 07 02 3F 07 02 3F 07 02 3F 07 02 FD 00 01 07 02 CC FF 00 4A 00 02 07 00 02 07 01 45 00 01 07 01 F7
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type
        //  -----  -----  -----  -----  ----
        //  32     112    687    716    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public void post_log_rotate() {
        package$.MODULE$.ExecutorWrapper((Executor)this.writeExecutor()).apply((Function0)new LevelDBClient$$anonfun$post_log_rotate.LevelDBClient$$anonfun$post_log_rotate$1(this));
    }
    
    public void replay_init() {
        final scala.collection.immutable.TreeMap snapshots = LevelDBClient$.MODULE$.find_sequence_files(this.directory(), ".index");
        final ObjectRef lastSnapshotIndex = ObjectRef.create((Object)snapshots.lastOption());
        this.lastIndexSnapshotPos_$eq(BoxesRunTime.unboxToLong(((Option)lastSnapshotIndex.elem).map((Function1)new LevelDBClient$$anonfun$replay_init.LevelDBClient$$anonfun$replay_init$3(this)).getOrElse((Function0)new LevelDBClient$$anonfun$replay_init.LevelDBClient$$anonfun$replay_init$1(this))));
        ((scala.collection.immutable.TreeMap)snapshots.filterNot((Function1)new LevelDBClient$$anonfun$replay_init.LevelDBClient$$anonfun$replay_init$4(this))).foreach((Function1)new LevelDBClient$$anonfun$replay_init.LevelDBClient$$anonfun$replay_init$5(this));
        FileSupport$.MODULE$.toRichFile(this.tempIndexFile()).recursiveDelete();
        this.might_fail((scala.Function0<Object>)new LevelDBClient$$anonfun$replay_init.LevelDBClient$$anonfun$replay_init$2(this, lastSnapshotIndex));
    }
    
    public WriteBatch replay_write_batch() {
        return this.replay_write_batch;
    }
    
    public void replay_write_batch_$eq(final WriteBatch x$1) {
        this.replay_write_batch = x$1;
    }
    
    public long indexRecoveryPosition() {
        return this.indexRecoveryPosition;
    }
    
    public void indexRecoveryPosition_$eq(final long x$1) {
        this.indexRecoveryPosition = x$1;
    }
    
    public void replay_from(final long from, final long limit, final boolean print_progress) {
        LevelDBClient$.MODULE$.debug((Function0<String>)new LevelDBClient$$anonfun$replay_from.LevelDBClient$$anonfun$replay_from$2(this), (Seq<Object>)Predef$.MODULE$.genericWrapArray((Object)new Object[] { BoxesRunTime.boxToLong(from), BoxesRunTime.boxToLong(limit) }));
        if (this.replay_write_batch() == null) {
            this.replay_write_batch_$eq(this.index().db().createWriteBatch());
        }
        this.might_fail((scala.Function0<Object>)new LevelDBClient$$anonfun$replay_from.LevelDBClient$$anonfun$replay_from$1(this, from, limit, print_progress));
    }
    
    public boolean replay_from$default$3() {
        return true;
    }
    
    public void org$apache$activemq$leveldb$LevelDBClient$$logRefDecrement(final long pos) {
        this.logRefKey(pos, this.logRefKey$default$2()).foreach((Function1)new LevelDBClient$$anonfun$org$apache$activemq$leveldb$LevelDBClient$$logRefDecrement.LevelDBClient$$anonfun$org$apache$activemq$leveldb$LevelDBClient$$logRefDecrement$1(this, pos));
    }
    
    public void org$apache$activemq$leveldb$LevelDBClient$$logRefIncrement(final long pos) {
        this.logRefKey(pos, this.logRefKey$default$2()).foreach((Function1)new LevelDBClient$$anonfun$org$apache$activemq$leveldb$LevelDBClient$$logRefIncrement.LevelDBClient$$anonfun$org$apache$activemq$leveldb$LevelDBClient$$logRefIncrement$1(this));
    }
    
    public Option<Object> logRefKey(final long pos, final RecordLog.LogInfo log_info) {
        Object o;
        if (log_info == null) {
            final Option rc = (this.recoveryLogs() == null) ? this.log().log_info(pos).map((Function1)new LevelDBClient$$anonfun.LevelDBClient$$anonfun$2(this)) : Option$.MODULE$.apply((Object)this.recoveryLogs().floorKey(BoxesRunTime.boxToLong(pos)));
            if (!rc.isDefined()) {
                LevelDBClient$.MODULE$.warn((Function0<String>)new LevelDBClient$$anonfun$logRefKey.LevelDBClient$$anonfun$logRefKey$1(this, pos), (Seq<Object>)Predef$.MODULE$.genericWrapArray((Object)new Object[0]));
            }
            o = rc;
        }
        else {
            o = new Some((Object)BoxesRunTime.boxToLong(log_info.position()));
        }
        return (Option<Object>)o;
    }
    
    public RecordLog.LogInfo logRefKey$default$2() {
        return null;
    }
    
    public void org$apache$activemq$leveldb$LevelDBClient$$collectionDecrementSize(final long key) {
        this.collectionMeta().get((Object)BoxesRunTime.boxToLong(key)).foreach((Function1)new LevelDBClient$$anonfun$org$apache$activemq$leveldb$LevelDBClient$$collectionDecrementSize.LevelDBClient$$anonfun$org$apache$activemq$leveldb$LevelDBClient$$collectionDecrementSize$1(this));
    }
    
    public void org$apache$activemq$leveldb$LevelDBClient$$collectionIncrementSize(final long key, final byte[] last_key) {
        this.collectionMeta().get((Object)BoxesRunTime.boxToLong(key)).foreach((Function1)new LevelDBClient$$anonfun$org$apache$activemq$leveldb$LevelDBClient$$collectionIncrementSize.LevelDBClient$$anonfun$org$apache$activemq$leveldb$LevelDBClient$$collectionIncrementSize$1(this, last_key));
    }
    
    private void storeCounters() {
        this.storeMap$1(LevelDBClient$.MODULE$.LOG_REF_INDEX_KEY(), this.logRefs());
        this.storeMap$1(LevelDBClient$.MODULE$.COLLECTION_META_KEY(), this.collectionMeta());
        this.storeList$1(LevelDBClient$.MODULE$.LOGS_INDEX_KEY(), this.log().log_file_positions());
        this.storeObject$1(LevelDBClient$.MODULE$.PRODUCER_IDS_INDEX_KEY(), this.org$apache$activemq$leveldb$LevelDBClient$$store.db().producerSequenceIdTracker());
    }
    
    public void org$apache$activemq$leveldb$LevelDBClient$$loadCounters() {
        this.loadMap$1(LevelDBClient$.MODULE$.LOG_REF_INDEX_KEY(), this.logRefs());
        this.loadMap$1(LevelDBClient$.MODULE$.COLLECTION_META_KEY(), this.collectionMeta());
        this.loadList$1(LevelDBClient$.MODULE$.LOGS_INDEX_KEY()).foreach((Function1)new LevelDBClient$$anonfun$org$apache$activemq$leveldb$LevelDBClient$$loadCounters.LevelDBClient$$anonfun$org$apache$activemq$leveldb$LevelDBClient$$loadCounters$1(this));
        this.loadObject$1(LevelDBClient$.MODULE$.PRODUCER_IDS_INDEX_KEY()).foreach((Function1)new LevelDBClient$$anonfun$org$apache$activemq$leveldb$LevelDBClient$$loadCounters.LevelDBClient$$anonfun$org$apache$activemq$leveldb$LevelDBClient$$loadCounters$2(this));
    }
    
    public long stored_wal_append_position() {
        return this.stored_wal_append_position;
    }
    
    public void stored_wal_append_position_$eq(final long x$1) {
        this.stored_wal_append_position = x$1;
    }
    
    public synchronized long wal_append_position() {
        return (this.log() != null && this.log().isOpen()) ? this.log().appender_limit() : this.stored_wal_append_position();
    }
    
    public synchronized void dirty_stop() {
        this.ingorefailure$1((Function0)new LevelDBClient$$anonfun$dirty_stop.LevelDBClient$$anonfun$dirty_stop$1(this));
        this.ingorefailure$1((Function0)new LevelDBClient$$anonfun$dirty_stop.LevelDBClient$$anonfun$dirty_stop$2(this));
        this.ingorefailure$1((Function0)new LevelDBClient$$anonfun$dirty_stop.LevelDBClient$$anonfun$dirty_stop$3(this));
        this.ingorefailure$1((Function0)new LevelDBClient$$anonfun$dirty_stop.LevelDBClient$$anonfun$dirty_stop$4(this));
    }
    
    public void stop() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: astore_1        /* executorToShutdown */
        //     2: aload_0         /* this */
        //     3: dup            
        //     4: astore_2       
        //     5: monitorenter   
        //     6: aload_0         /* this */
        //     7: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.writeExecutor:()Ljava/util/concurrent/ExecutorService;
        //    10: ifnonnull       19
        //    13: getstatic       scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
        //    16: goto            32
        //    19: aload_0         /* this */
        //    20: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.writeExecutor:()Ljava/util/concurrent/ExecutorService;
        //    23: astore_1        /* executorToShutdown */
        //    24: aload_0         /* this */
        //    25: aconst_null    
        //    26: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.writeExecutor_$eq:(Ljava/util/concurrent/ExecutorService;)V
        //    29: getstatic       scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
        //    32: pop            
        //    33: aload_2        
        //    34: monitorexit    
        //    35: aload_1         /* executorToShutdown */
        //    36: ifnull          218
        //    39: aload_1         /* executorToShutdown */
        //    40: invokeinterface java/util/concurrent/ExecutorService.shutdown:()V
        //    45: aload_1         /* executorToShutdown */
        //    46: ldc2_w          60
        //    49: getstatic       java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
        //    52: invokeinterface java/util/concurrent/ExecutorService.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z
        //    57: pop            
        //    58: aload_0         /* this */
        //    59: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.snapshotRwLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock;
        //    62: invokevirtual   java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
        //    65: invokevirtual   java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock:()V
        //    68: aload_0         /* this */
        //    69: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.index:()Lorg/apache/activemq/leveldb/LevelDBClient$RichDB;
        //    72: ifnull          149
        //    75: aload_0         /* this */
        //    76: invokespecial   org/apache/activemq/leveldb/LevelDBClient.storeCounters:()V
        //    79: aload_0         /* this */
        //    80: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.index:()Lorg/apache/activemq/leveldb/LevelDBClient$RichDB;
        //    83: getstatic       org/apache/activemq/leveldb/LevelDBClient$.MODULE$:Lorg/apache/activemq/leveldb/LevelDBClient$;
        //    86: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$.DIRTY_INDEX_KEY:()[B
        //    89: getstatic       org/apache/activemq/leveldb/LevelDBClient$.MODULE$:Lorg/apache/activemq/leveldb/LevelDBClient$;
        //    92: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$.FALSE:()[B
        //    95: new             Lorg/iq80/leveldb/WriteOptions;
        //    98: dup            
        //    99: invokespecial   org/iq80/leveldb/WriteOptions.<init>:()V
        //   102: iconst_1       
        //   103: invokevirtual   org/iq80/leveldb/WriteOptions.sync:(Z)Lorg/iq80/leveldb/WriteOptions;
        //   106: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$RichDB.put:([B[BLorg/iq80/leveldb/WriteOptions;)V
        //   109: aload_0         /* this */
        //   110: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.index:()Lorg/apache/activemq/leveldb/LevelDBClient$RichDB;
        //   113: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$RichDB.close:()V
        //   116: aload_0         /* this */
        //   117: aconst_null    
        //   118: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.index_$eq:(Lorg/apache/activemq/leveldb/LevelDBClient$RichDB;)V
        //   121: getstatic       org/apache/activemq/leveldb/LevelDBClient$.MODULE$:Lorg/apache/activemq/leveldb/LevelDBClient$;
        //   124: new             Lorg/apache/activemq/leveldb/LevelDBClient$$anonfun$stop$1;
        //   127: dup            
        //   128: aload_0         /* this */
        //   129: invokespecial   org/apache/activemq/leveldb/LevelDBClient$$anonfun$stop$1.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient;)V
        //   132: getstatic       scala/Predef$.MODULE$:Lscala/Predef$;
        //   135: iconst_0       
        //   136: anewarray       Ljava/lang/Object;
        //   139: invokevirtual   scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
        //   142: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$.debug:(Lscala/Function0;Lscala/collection/Seq;)V
        //   145: aload_0         /* this */
        //   146: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.copyDirtyIndexToSnapshot:()V
        //   149: aload_0         /* this */
        //   150: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.log:()Lorg/apache/activemq/leveldb/RecordLog;
        //   153: ifnull          189
        //   156: aload_0         /* this */
        //   157: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.log:()Lorg/apache/activemq/leveldb/RecordLog;
        //   160: invokevirtual   org/apache/activemq/leveldb/RecordLog.isOpen:()Z
        //   163: ifeq            189
        //   166: aload_0         /* this */
        //   167: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.log:()Lorg/apache/activemq/leveldb/RecordLog;
        //   170: invokevirtual   org/apache/activemq/leveldb/RecordLog.close:()V
        //   173: aload_0         /* this */
        //   174: aload_0         /* this */
        //   175: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.log:()Lorg/apache/activemq/leveldb/RecordLog;
        //   178: invokevirtual   org/apache/activemq/leveldb/RecordLog.appender_limit:()J
        //   181: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.stored_wal_append_position_$eq:(J)V
        //   184: aload_0         /* this */
        //   185: aconst_null    
        //   186: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.log_$eq:(Lorg/apache/activemq/leveldb/RecordLog;)V
        //   189: aload_0         /* this */
        //   190: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.plist:()Lorg/apache/activemq/leveldb/LevelDBClient$RichDB;
        //   193: ifnull          208
        //   196: aload_0         /* this */
        //   197: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.plist:()Lorg/apache/activemq/leveldb/LevelDBClient$RichDB;
        //   200: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$RichDB.close:()V
        //   203: aload_0         /* this */
        //   204: aconst_null    
        //   205: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.plist_$eq:(Lorg/apache/activemq/leveldb/LevelDBClient$RichDB;)V
        //   208: aload_0         /* this */
        //   209: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.snapshotRwLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock;
        //   212: invokevirtual   java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
        //   215: invokevirtual   java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
        //   218: return         
        //   219: aload_2        
        //   220: monitorexit    
        //   221: athrow         
        //   222: astore_3       
        //   223: aload_0         /* this */
        //   224: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.snapshotRwLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock;
        //   227: invokevirtual   java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
        //   230: invokevirtual   java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
        //   233: aload_3        
        //   234: athrow         
        //    StackMapTable: 00 08 FD 00 13 05 07 00 02 FF 00 0C 00 03 07 00 02 07 04 2A 07 00 02 00 01 07 04 24 FB 00 74 27 12 09 40 07 01 F7 42 07 01 F7
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type
        //  -----  -----  -----  -----  ----
        //  68     208    222    235    Any
        //  6      35     219    222    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0149:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2596)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public <T> T usingIndex(final Function0<T> func) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: invokevirtual   org/apache/activemq/leveldb/LevelDBClient.snapshotRwLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock;
        //     4: invokevirtual   java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
        //     7: astore_2        /* lock */
        //     8: aload_2         /* lock */
        //     9: invokevirtual   java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock:()V
        //    12: aload_1         /* func */
        //    13: invokeinterface scala/Function0.apply:()Ljava/lang/Object;
        //    18: aload_2         /* lock */
        //    19: invokevirtual   java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
        //    22: areturn        
        //    23: astore_3       
        //    24: aload_2        
        //    25: invokevirtual   java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
        //    28: aload_3        
        //    29: athrow         
        //    Signature:
        //  <T:Ljava/lang/Object;>(Lscala/Function0<TT;>;)TT;
        //    StackMapTable: 00 01 FF 00 17 00 03 07 00 02 07 01 E8 07 04 6F 00 01 07 01 F7
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type
        //  -----  -----  -----  -----  ----
        //  12     18     23     30     Any
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public <T> T might_fail_using_index(final Function0<T> func) {
        return (T)this.might_fail((scala.Function0<Object>)new LevelDBClient$$anonfun$might_fail_using_index.LevelDBClient$$anonfun$might_fail_using_index$1(this, (Function0)func));
    }
    
    public void suspend() {
        this.snapshotRwLock().writeLock().lock();
        this.storeCounters();
        this.index().put(LevelDBClient$.MODULE$.DIRTY_INDEX_KEY(), LevelDBClient$.MODULE$.FALSE(), new WriteOptions().sync(true));
        this.index().db().suspendCompactions();
    }
    
    public void resume() {
        this.index().db().resumeCompactions();
        this.snapshotRwLock().writeLock().unlock();
    }
    
    public long nextIndexSnapshotPos() {
        return this.wal_append_position();
    }
    
    public void copyDirtyIndexToSnapshot() {
        if (this.nextIndexSnapshotPos() == this.lastIndexSnapshotPos()) {
            return;
        }
        this.copyDirtyIndexToSnapshot(this.nextIndexSnapshotPos());
    }
    
    public void copyDirtyIndexToSnapshot(final long walPosition) {
        LevelDBClient$.MODULE$.debug((Function0<String>)new LevelDBClient$$anonfun$copyDirtyIndexToSnapshot.LevelDBClient$$anonfun$copyDirtyIndexToSnapshot$1(this, walPosition), (Seq<Object>)Predef$.MODULE$.genericWrapArray((Object)new Object[0]));
        final File tmpDir = this.tempIndexFile();
        tmpDir.mkdirs();
        try {
            LevelDBClient$.MODULE$.copyIndex(this.dirtyIndexFile(), tmpDir);
            tmpDir.renameTo(this.snapshotIndexFile(walPosition));
            this.replaceLatestSnapshotDirectory(walPosition);
        }
        catch (Exception e) {
            LevelDBClient$.MODULE$.warn(e, (Function0<String>)new LevelDBClient$$anonfun$copyDirtyIndexToSnapshot.LevelDBClient$$anonfun$copyDirtyIndexToSnapshot$2(this, e), (Seq<Object>)Predef$.MODULE$.genericWrapArray((Object)new Object[0]));
            FileSupport$.MODULE$.toRichFile(tmpDir).recursiveDelete();
        }
    }
    
    public void replaceLatestSnapshotDirectory(final long newSnapshotIndexPos) {
        FileSupport$.MODULE$.toRichFile(this.snapshotIndexFile(this.lastIndexSnapshotPos())).recursiveDelete();
        this.lastIndexSnapshotPos_$eq(newSnapshotIndexPos);
    }
    
    public void snapshotIndex(final boolean sync) {
        this.suspend();
        try {
            if (sync) {
                this.log().current_appender().force();
            }
            this.copyDirtyIndexToSnapshot();
        }
        finally {
            this.resume();
        }
    }
    
    public boolean snapshotIndex$default$1() {
        return false;
    }
    
    public void purge() {
        this.suspend();
        try {
            this.log().close();
            this.locked_purge();
        }
        finally {
            this.might_fail((scala.Function0<Object>)new LevelDBClient$$anonfun$purge.LevelDBClient$$anonfun$purge$1(this));
            this.resume();
        }
    }
    
    public void locked_purge() {
        Predef$.MODULE$.refArrayOps((Object[])FileSupport$.MODULE$.toRichFile(this.logDirectory()).list_files()).foreach((Function1)new LevelDBClient$$anonfun$locked_purge.LevelDBClient$$anonfun$locked_purge$1(this));
        Predef$.MODULE$.refArrayOps((Object[])FileSupport$.MODULE$.toRichFile(this.directory()).list_files()).foreach((Function1)new LevelDBClient$$anonfun$locked_purge.LevelDBClient$$anonfun$locked_purge$2(this));
    }
    
    public Option<CollectionMeta> addCollection(final CollectionRecord.Buffer record) {
        this.assert_write_thread_executing();
        final byte[] key = LevelDBClient$.MODULE$.encodeLongKey(LevelDBClient$.MODULE$.COLLECTION_PREFIX(), record.getKey());
        final Buffer value = record.toUnframedBuffer();
        this.might_fail_using_index((scala.Function0<Object>)new LevelDBClient$$anonfun$addCollection.LevelDBClient$$anonfun$addCollection$1(this, key, value));
        return (Option<CollectionMeta>)this.collectionMeta().put((Object)BoxesRunTime.boxToLong(record.getKey()), (Object)new CollectionMeta());
    }
    
    public long getLogAppendPosition() {
        return this.log().appender_limit();
    }
    
    public Seq<Tuple2<Object, CollectionRecord.Buffer>> listCollections() {
        final ListBuffer rc = (ListBuffer)ListBuffer$.MODULE$.apply((Seq)Nil$.MODULE$);
        this.might_fail_using_index((scala.Function0<Object>)new LevelDBClient$$anonfun$listCollections.LevelDBClient$$anonfun$listCollections$1(this, rc));
        return (Seq<Tuple2<Object, CollectionRecord.Buffer>>)rc;
    }
    
    public void removeCollection(final long collectionKey) {
        this.assert_write_thread_executing();
        final byte[] key = LevelDBClient$.MODULE$.encodeLongKey(LevelDBClient$.MODULE$.COLLECTION_PREFIX(), collectionKey);
        final byte[] value = LevelDBClient$.MODULE$.encodeVLong(collectionKey);
        final byte[] entryKeyPrefix = LevelDBClient$.MODULE$.encodeLongKey(LevelDBClient$.MODULE$.ENTRY_PREFIX(), collectionKey);
        this.collectionMeta().remove((Object)BoxesRunTime.boxToLong(collectionKey));
        this.might_fail_using_index((scala.Function0<Object>)new LevelDBClient$$anonfun$removeCollection.LevelDBClient$$anonfun$removeCollection$1(this, key, value, entryKeyPrefix));
    }
    
    public void collectionEmpty(final long collectionKey) {
        this.assert_write_thread_executing();
        final byte[] key = LevelDBClient$.MODULE$.encodeLongKey(LevelDBClient$.MODULE$.COLLECTION_PREFIX(), collectionKey);
        final byte[] value = LevelDBClient$.MODULE$.encodeVLong(collectionKey);
        final byte[] entryKeyPrefix = LevelDBClient$.MODULE$.encodeLongKey(LevelDBClient$.MODULE$.ENTRY_PREFIX(), collectionKey);
        final CollectionMeta meta = (CollectionMeta)this.collectionMeta().getOrElseUpdate((Object)BoxesRunTime.boxToLong(collectionKey), (Function0)new LevelDBClient$$anonfun.LevelDBClient$$anonfun$3(this));
        meta.size_$eq(0L);
        meta.last_key_$eq(null);
        this.might_fail_using_index((scala.Function0<Object>)new LevelDBClient$$anonfun$collectionEmpty.LevelDBClient$$anonfun$collectionEmpty$1(this, key, value, entryKeyPrefix));
    }
    
    public int decodeQueueEntryMeta(final EntryRecord.Getter value) {
        if (value.hasMeta()) {
            final DataByteArrayInputStream is = new DataByteArrayInputStream(value.getMeta());
            final int metaVersion = is.readVarInt();
            switch (metaVersion) {
                case 1: {
                    return is.readVarInt();
                }
            }
        }
        return 0;
    }
    
    public int getDeliveryCounter(final long collectionKey, final long seq) {
        final ReadOptions ro = new ReadOptions();
        ro.fillCache(true);
        ro.verifyChecksums(this.verifyChecksums());
        final byte[] key = LevelDBClient$.MODULE$.encodeEntryKey(LevelDBClient$.MODULE$.ENTRY_PREFIX(), collectionKey, LevelDBClient$.MODULE$.encodeLong(seq));
        final IntRef rc = IntRef.create(0);
        this.might_fail_using_index((scala.Function0<Object>)new LevelDBClient$$anonfun$getDeliveryCounter.LevelDBClient$$anonfun$getDeliveryCounter$1(this, ro, key, rc));
        return rc.elem;
    }
    
    public void queueCursor(final long collectionKey, final long seq, final Function1<Message, Object> func) {
        this.collectionCursor(collectionKey, LevelDBClient$.MODULE$.encodeLong(seq), (Function2<Buffer, EntryRecord.Buffer, Object>)new LevelDBClient$$anonfun$queueCursor.LevelDBClient$$anonfun$queueCursor$1(this, collectionKey, (Function1)func));
    }
    
    public void transactionCursor(final long collectionKey, final Function1<Object, Object> func) {
        this.collectionCursor(collectionKey, LevelDBClient$.MODULE$.encodeLong(0L), (Function2<Buffer, EntryRecord.Buffer, Object>)new LevelDBClient$$anonfun$transactionCursor.LevelDBClient$$anonfun$transactionCursor$1(this, collectionKey, (Function1)func));
    }
    
    public long getAckPosition(final long subKey) {
        return BoxesRunTime.unboxToLong(this.might_fail_using_index((scala.Function0<Object>)new LevelDBClient$$anonfun$getAckPosition.LevelDBClient$$anonfun$getAckPosition$1(this, subKey)));
    }
    
    public Message getMessage(final Object locator) {
        Predef$.MODULE$.assert(locator != null);
        Object map;
        if (locator instanceof MessageRecord) {
            map = new Some((Object)((MessageRecord)locator).data());
        }
        else {
            if (!(locator instanceof DataLocator)) {
                throw new MatchError(locator);
            }
            final DataLocator dataLocator = (DataLocator)locator;
            final long pos = dataLocator.pos();
            final int len = dataLocator.len();
            map = this.log().read(pos, len).map((Function1)new LevelDBClient$$anonfun.LevelDBClient$$anonfun$4(this));
        }
        final Option buffer = (Option)map;
        return (Message)buffer.map((Function1)new LevelDBClient$$anonfun$getMessage.LevelDBClient$$anonfun$getMessage$1(this)).getOrElse((Function0)new LevelDBClient$$anonfun$getMessage.LevelDBClient$$anonfun$getMessage$2(this));
    }
    
    public Message decodeMessage(final Buffer x) {
        final Buffer data = this.org$apache$activemq$leveldb$LevelDBClient$$store.snappyCompressLogs() ? org.apache.activemq.leveldb.package$.MODULE$.Snappy().uncompress(x) : x;
        return (Message)this.org$apache$activemq$leveldb$LevelDBClient$$store.wireFormat().unmarshal(new ByteSequence(data.data, data.offset, data.length));
    }
    
    public void collectionCursor(final long collectionKey, final Buffer cursorPosition, final Function2<Buffer, EntryRecord.Buffer, Object> func) {
        final ReadOptions ro = new ReadOptions();
        ro.fillCache(true);
        ro.verifyChecksums(this.verifyChecksums());
        final byte[] start = LevelDBClient$.MODULE$.encodeEntryKey(LevelDBClient$.MODULE$.ENTRY_PREFIX(), collectionKey, cursorPosition);
        final byte[] end = LevelDBClient$.MODULE$.encodeLongKey(LevelDBClient$.MODULE$.ENTRY_PREFIX(), collectionKey + 1L);
        this.might_fail_using_index((scala.Function0<Object>)new LevelDBClient$$anonfun$collectionCursor.LevelDBClient$$anonfun$collectionCursor$1(this, (Function2)func, ro, start, end));
    }
    
    public long collectionSize(final long collectionKey) {
        return BoxesRunTime.unboxToLong(this.collectionMeta().get((Object)BoxesRunTime.boxToLong(collectionKey)).map((Function1)new LevelDBClient$$anonfun$collectionSize.LevelDBClient$$anonfun$collectionSize$2(this)).getOrElse((Function0)new LevelDBClient$$anonfun$collectionSize.LevelDBClient$$anonfun$collectionSize$1(this)));
    }
    
    public boolean collectionIsEmpty(final long collectionKey) {
        final byte[] entryKeyPrefix = LevelDBClient$.MODULE$.encodeLongKey(LevelDBClient$.MODULE$.ENTRY_PREFIX(), collectionKey);
        final BooleanRef empty = BooleanRef.create(true);
        this.might_fail_using_index((scala.Function0<Object>)new LevelDBClient$$anonfun$collectionIsEmpty.LevelDBClient$$anonfun$collectionIsEmpty$1(this, entryKeyPrefix, empty));
        return empty.elem;
    }
    
    public TimeMetric max_write_message_latency() {
        return this.max_write_message_latency;
    }
    
    public TimeMetric max_write_enqueue_latency() {
        return this.max_write_enqueue_latency;
    }
    
    public TimeMetric max_index_write_latency() {
        return this.max_index_write_latency;
    }
    
    public void store(final DelayableUOW[] uows) {
        this.assert_write_thread_executing();
        this.might_fail_using_index((scala.Function0<Object>)new LevelDBClient$$anonfun$store.LevelDBClient$$anonfun$store$1(this, uows));
    }
    
    public boolean storeTrace$default$2() {
        return false;
    }
    
    public boolean write_uows(final DelayableUOW[] uows, final RecordLog.LogAppender appender, final WriteBatch batch) {
        final BooleanRef syncNeeded = BooleanRef.create(false);
        final LongRef write_message_total = LongRef.create(0L);
        final LongRef write_enqueue_total = LongRef.create(0L);
        Predef$.MODULE$.refArrayOps((Object[])uows).foreach((Function1)new LevelDBClient$$anonfun$write_uows.LevelDBClient$$anonfun$write_uows$1(this, appender, batch, syncNeeded, write_message_total, write_enqueue_total));
        this.max_write_message_latency().add(write_message_total.elem);
        this.max_write_enqueue_latency().add(write_enqueue_total.elem);
        return syncNeeded.elem;
    }
    
    public Seq<Tuple2<Buffer, EntryRecord.Buffer>> getCollectionEntries(final long collectionKey, final long firstSeq, final long lastSeq) {
        final ObjectRef rc = ObjectRef.create((Object)ListBuffer$.MODULE$.apply((Seq)Nil$.MODULE$));
        final ReadOptions ro = new ReadOptions();
        ro.verifyChecksums(this.verifyChecksums());
        ro.fillCache(true);
        this.might_fail_using_index((scala.Function0<Object>)new LevelDBClient$$anonfun$getCollectionEntries.LevelDBClient$$anonfun$getCollectionEntries$1(this, collectionKey, firstSeq, lastSeq, rc, ro));
        return (Seq<Tuple2<Buffer, EntryRecord.Buffer>>)rc.elem;
    }
    
    public long getLastQueueEntrySeq(final long collectionKey) {
        return BoxesRunTime.unboxToLong(this.getLastCollectionEntryKey(collectionKey).map((Function1)new LevelDBClient$$anonfun$getLastQueueEntrySeq.LevelDBClient$$anonfun$getLastQueueEntrySeq$2(this)).getOrElse((Function0)new LevelDBClient$$anonfun$getLastQueueEntrySeq.LevelDBClient$$anonfun$getLastQueueEntrySeq$1(this)));
    }
    
    public Option<Buffer> getLastCollectionEntryKey(final long collectionKey) {
        return (Option<Buffer>)this.collectionMeta().get((Object)BoxesRunTime.boxToLong(collectionKey)).flatMap((Function1)new LevelDBClient$$anonfun$getLastCollectionEntryKey.LevelDBClient$$anonfun$getLastCollectionEntryKey$1(this)).map((Function1)new LevelDBClient$$anonfun$getLastCollectionEntryKey.LevelDBClient$$anonfun$getLastCollectionEntryKey$2(this));
    }
    
    private void detect_if_compact_needed() {
        if (this.org$apache$activemq$leveldb$LevelDBClient$$store.autoCompactionRatio() <= 0) {
            return;
        }
        final LongRef index_usage = LongRef.create(0L);
        FileSupport$.MODULE$.toRichFile(this.dirtyIndexFile()).recursiveList().foreach((Function1)new LevelDBClient$$anonfun$detect_if_compact_needed.LevelDBClient$$anonfun$detect_if_compact_needed$1(this, index_usage));
        final LongRef index_queue_entries = LongRef.create(0L);
        this.logRefs().withFilter((Function1)new LevelDBClient$$anonfun$detect_if_compact_needed.LevelDBClient$$anonfun$detect_if_compact_needed$2(this)).foreach((Function1)new LevelDBClient$$anonfun$detect_if_compact_needed.LevelDBClient$$anonfun$detect_if_compact_needed$3(this, index_queue_entries));
        final long SSL_FILE_SIZE = 4194304L;
        if (index_usage.elem > SSL_FILE_SIZE * 10L) {
            if (index_queue_entries.elem > 0L) {
                final float ratio = (float)(index_usage.elem * 1.0) / index_queue_entries.elem;
                if (ratio > this.org$apache$activemq$leveldb$LevelDBClient$$store.autoCompactionRatio()) {
                    this.index().compact_needed_$eq(true);
                }
            }
            else {
                this.index().compact_needed_$eq(true);
            }
        }
    }
    
    public void gc(final Seq<Tuple2<Object, Object>> topicPositions) {
        if (topicPositions.isEmpty()) {
            final BoxedUnit unit = BoxedUnit.UNIT;
        }
        else {
            this.might_fail_using_index((scala.Function0<Object>)new LevelDBClient$$anonfun$gc.LevelDBClient$$anonfun$gc$1(this, (Seq)topicPositions));
        }
        this.detect_if_compact_needed();
        if (this.index().compact_needed()) {
            final long start = System.nanoTime();
            this.index().compact();
            final long duration = System.nanoTime() - start;
            LevelDBClient$.MODULE$.info((Function0<String>)new LevelDBClient$$anonfun$gc.LevelDBClient$$anonfun$gc$3(this), (Seq<Object>)Predef$.MODULE$.genericWrapArray((Object)new Object[] { this.dirtyIndexFile(), BoxesRunTime.boxToDouble(duration / 1000000.0) }));
        }
        this.lastIndexSnapshotPos();
        this.logRefs().toSeq().withFilter((Function1)new LevelDBClient$$anonfun$gc.LevelDBClient$$anonfun$gc$4(this)).foreach((Function1)new LevelDBClient$$anonfun$gc.LevelDBClient$$anonfun$gc$5(this));
        final Set emptyJournals = (Set)JavaConversions$.MODULE$.asScalaSet((java.util.Set)this.log().log_infos().keySet()).toSet().$minus$minus((GenTraversableOnce)this.logRefs().keySet());
        final LongRef limit = LongRef.create(this.oldest_retained_snapshot());
        final long deleteLimit = RichLong$.MODULE$.min$extension(Predef$.MODULE$.longWrapper(BoxesRunTime.unboxToLong(this.logRefKey(limit.elem, this.logRefKey$default$2()).getOrElse((Function0)new LevelDBClient$$anonfun.LevelDBClient$$anonfun$1(this, limit)))), this.log().appender_start());
        emptyJournals.foreach((Function1)new LevelDBClient$$anonfun$gc.LevelDBClient$$anonfun$gc$2(this, deleteLimit));
    }
    
    public long oldest_retained_snapshot() {
        return this.lastIndexSnapshotPos();
    }
    
    public void removePlist(final long collectionKey) {
        final Buffer entryKeyPrefix = LevelDBClient$.MODULE$.encodeLong(collectionKey);
        this.collectionMeta().remove((Object)BoxesRunTime.boxToLong(collectionKey));
        this.might_fail((scala.Function0<Object>)new LevelDBClient$$anonfun$removePlist.LevelDBClient$$anonfun$removePlist$1(this, entryKeyPrefix));
    }
    
    public void plistPut(final byte[] key, final byte[] value) {
        this.plist().put(key, value, LevelDBClient$.MODULE$.PLIST_WRITE_OPTIONS());
    }
    
    public void plistDelete(final byte[] key) {
        this.plist().delete(key, LevelDBClient$.MODULE$.PLIST_WRITE_OPTIONS());
    }
    
    public Option<byte[]> plistGet(final byte[] key) {
        final RichDB qual$18 = this.plist();
        final byte[] x$58 = key;
        final ReadOptions x$59 = qual$18.get$default$2();
        return qual$18.get(x$58, x$59);
    }
    
    public DBIterator plistIterator() {
        return this.plist().db().iterator();
    }
    
    private final Nothing$ handleFailure$1(final IOException e) {
        final ObjectRef failure = ObjectRef.create((Object)e);
        if (this.org$apache$activemq$leveldb$LevelDBClient$$store.broker_service() != null) {
            new LevelDBClient$$anon.LevelDBClient$$anon$2(this, e, failure).start();
            while (!this.org$apache$activemq$leveldb$LevelDBClient$$store.broker_service().isStopping()) {
                Thread.sleep(100L);
            }
        }
        throw new SuppressReplyException((Throwable)failure.elem);
    }
    
    private final void storeMap$1(final byte[] key, final HashMap map) {
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        final ObjectOutputStream os = new ObjectOutputStream(baos);
        os.writeInt(map.size());
        map.withFilter((Function1)new LevelDBClient$$anonfun$storeMap$1.LevelDBClient$$anonfun$storeMap$1$1(this)).foreach((Function1)new LevelDBClient$$anonfun$storeMap$1.LevelDBClient$$anonfun$storeMap$1$2(this, os));
        os.close();
        try {
            final RichDB qual$8 = this.index();
            final byte[] x$35 = key;
            final byte[] x$36 = baos.toByteArray();
            final WriteOptions x$37 = qual$8.put$default$3();
            qual$8.put(x$35, x$36, x$37);
        }
        finally {}
    }
    
    private final void storeList$1(final byte[] key, final long[] list) {
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        final ObjectOutputStream os = new ObjectOutputStream(baos);
        os.writeInt(Predef$.MODULE$.longArrayOps(list).size());
        Predef$.MODULE$.longArrayOps(list).foreach((Function1)new LevelDBClient$$anonfun$storeList$1.LevelDBClient$$anonfun$storeList$1$1(this, os));
        os.close();
        try {
            final RichDB qual$9 = this.index();
            final byte[] x$38 = key;
            final byte[] x$39 = baos.toByteArray();
            final WriteOptions x$40 = qual$9.put$default$3();
            qual$9.put(x$38, x$39, x$40);
        }
        finally {}
    }
    
    private final void storeObject$1(final byte[] key, final Object o) {
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        final ObjectOutputStream os = new ObjectOutputStream(baos);
        os.writeObject(o);
        os.close();
        final RichDB qual$10 = this.index();
        final byte[] x$41 = key;
        final byte[] x$42 = baos.toByteArray();
        final WriteOptions x$43 = qual$10.put$default$3();
        qual$10.put(x$41, x$42, x$43);
    }
    
    private final void loadMap$1(final byte[] key, final HashMap map) {
        map.clear();
        this.index().get(key, new ReadOptions()).foreach((Function1)new LevelDBClient$$anonfun$loadMap$1.LevelDBClient$$anonfun$loadMap$1$1(this, map));
    }
    
    private final Option loadList$1(final byte[] key) {
        return this.index().get(key, new ReadOptions()).map((Function1)new LevelDBClient$$anonfun$loadList$1.LevelDBClient$$anonfun$loadList$1$1(this));
    }
    
    private final Option loadObject$1(final byte[] key) {
        return this.index().get(key, new ReadOptions()).map((Function1)new LevelDBClient$$anonfun$loadObject$1.LevelDBClient$$anonfun$loadObject$1$1(this));
    }
    
    private final void ingorefailure$1(final Function0 func) {
        try {
            func.apply$mcV$sp();
        }
        finally {}
    }
    
    public LevelDBClient(final LevelDBStore store) {
        this.org$apache$activemq$leveldb$LevelDBClient$$store = store;
        this.dispatchQueue = package$.MODULE$.createQueue("leveldb");
        this.snapshotRwLock = new ReentrantReadWriteLock(true);
        this.logRefs = (HashMap<Object, LongCounter>)HashMap$.MODULE$.apply((Seq)Nil$.MODULE$);
        this.collectionMeta = (HashMap<Object, CollectionMeta>)HashMap$.MODULE$.apply((Seq)Nil$.MODULE$);
        this.replay_write_batch = null;
        this.indexRecoveryPosition = 0L;
        this.stored_wal_append_position = 0L;
        this.max_write_message_latency = new TimeMetric();
        this.max_write_enqueue_latency = new TimeMetric();
        this.max_index_write_latency = new TimeMetric();
    }
    
    public static class WriteThread extends Thread
    {
        public WriteThread(final Runnable r) {
            super(r);
            this.setDaemon(true);
        }
    }
    
    public static final class RichDB
    {
        private final DB db;
        private final boolean isPureJavaVersion;
        private volatile boolean compact_needed;
        
        public DB db() {
            return this.db;
        }
        
        public boolean isPureJavaVersion() {
            return this.isPureJavaVersion;
        }
        
        public String getProperty(final String name) {
            return this.db().getProperty(name);
        }
        
        public long[] getApproximateSizes(final Seq<Range> ranges) {
            return this.db().getApproximateSizes((Range[])ranges.toArray(ClassTag$.MODULE$.apply((Class)Range.class)));
        }
        
        public Option<byte[]> get(final byte[] key, final ReadOptions ro) {
            return (Option<byte[]>)Option$.MODULE$.apply((Object)this.db().get(key, ro));
        }
        
        public ReadOptions get$default$2() {
            return new ReadOptions();
        }
        
        public void close() {
            this.db().close();
        }
        
        public void delete(final byte[] key, final WriteOptions wo) {
            this.db().delete(key, wo);
        }
        
        public WriteOptions delete$default$2() {
            return new WriteOptions();
        }
        
        public void put(final byte[] key, final byte[] value, final WriteOptions wo) {
            this.db().put(key, value, wo);
        }
        
        public WriteOptions put$default$3() {
            return new WriteOptions();
        }
        
        public <T> T write(final WriteOptions wo, final TimeMetric max_write_latency, final Function1<WriteBatch, T> func) {
            final WriteBatch updates = this.db().createWriteBatch();
            try {
                final Some rc = new Some(func.apply((Object)updates));
                max_write_latency.apply((scala.Function0<Object>)new LevelDBClient$RichDB$$anonfun$write.LevelDBClient$RichDB$$anonfun$write$1(this, wo, updates));
                return (T)rc.get();
            }
            finally {
                updates.close();
            }
        }
        
        public <T> WriteOptions write$default$1() {
            return new WriteOptions();
        }
        
        public <T> TimeMetric write$default$2() {
            return new TimeMetric();
        }
        
        public <T> Snapshot store(final WriteBatch write, final WriteOptions wo) {
            return this.db().write(write, wo);
        }
        
        public <T> WriteOptions store$default$2() {
            return new WriteOptions();
        }
        
        public <T> T snapshot(final Function1<Snapshot, T> func) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$RichDB.db:()Lorg/iq80/leveldb/DB;
            //     4: invokeinterface org/iq80/leveldb/DB.getSnapshot:()Lorg/iq80/leveldb/Snapshot;
            //     9: astore_2        /* snapshot */
            //    10: aload_1         /* func */
            //    11: aload_2         /* snapshot */
            //    12: invokeinterface scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
            //    17: aload_2         /* snapshot */
            //    18: invokeinterface org/iq80/leveldb/Snapshot.close:()V
            //    23: areturn        
            //    24: astore_3       
            //    25: aload_2        
            //    26: invokeinterface org/iq80/leveldb/Snapshot.close:()V
            //    31: aload_3        
            //    32: athrow         
            //    Signature:
            //  <T:Ljava/lang/Object;>(Lscala/Function1<Lorg/iq80/leveldb/Snapshot;TT;>;)TT;
            //    StackMapTable: 00 01 FF 00 18 00 03 07 00 02 07 00 70 07 00 A1 00 01 07 00 90
            //    Exceptions:
            //  Try           Handler
            //  Start  End    Start  End    Type
            //  -----  -----  -----  -----  ----
            //  10     17     24     33     Any
            // 
            // The error that occurred was:
            // 
            // java.lang.NullPointerException
            //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
            //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
            //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        public void cursorKeys(final ReadOptions ro, final Function1<byte[], Object> func) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$RichDB.db:()Lorg/iq80/leveldb/DB;
            //     4: aload_1         /* ro */
            //     5: invokeinterface org/iq80/leveldb/DB.iterator:(Lorg/iq80/leveldb/ReadOptions;)Lorg/iq80/leveldb/DBIterator;
            //    10: astore_3        /* iterator */
            //    11: aload_3         /* iterator */
            //    12: invokeinterface org/iq80/leveldb/DBIterator.seekToFirst:()V
            //    17: aload_3         /* iterator */
            //    18: invokeinterface org/iq80/leveldb/DBIterator.hasNext:()Z
            //    23: ifeq            59
            //    26: aload_2         /* func */
            //    27: aload_3         /* iterator */
            //    28: invokeinterface org/iq80/leveldb/DBIterator.peekNext:()Ljava/util/Map$Entry;
            //    33: invokeinterface java/util/Map$Entry.getKey:()Ljava/lang/Object;
            //    38: invokeinterface scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
            //    43: invokestatic    scala/runtime/BoxesRunTime.unboxToBoolean:(Ljava/lang/Object;)Z
            //    46: ifeq            59
            //    49: aload_3         /* iterator */
            //    50: invokeinterface org/iq80/leveldb/DBIterator.next:()Ljava/lang/Object;
            //    55: pop            
            //    56: goto            17
            //    59: aload_3         /* iterator */
            //    60: invokeinterface org/iq80/leveldb/DBIterator.close:()V
            //    65: return         
            //    66: astore          4
            //    68: aload_3        
            //    69: invokeinterface org/iq80/leveldb/DBIterator.close:()V
            //    74: aload           4
            //    76: athrow         
            //    Signature:
            //  (Lorg/iq80/leveldb/ReadOptions;Lscala/Function1<[BLjava/lang/Object;>;)V
            //    StackMapTable: 00 03 FC 00 11 07 00 AB 29 46 07 00 90
            //    Exceptions:
            //  Try           Handler
            //  Start  End    Start  End    Type
            //  -----  -----  -----  -----  ----
            //  17     59     66     77     Any
            // 
            // The error that occurred was:
            // 
            // java.lang.NullPointerException
            //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
            //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
            //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        public ReadOptions cursorKeys$default$1() {
            return new ReadOptions();
        }
        
        public void cursorKeysPrefixed(final byte[] prefix, final ReadOptions ro, final Function1<byte[], Object> func) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$RichDB.db:()Lorg/iq80/leveldb/DB;
            //     4: aload_2         /* ro */
            //     5: invokeinterface org/iq80/leveldb/DB.iterator:(Lorg/iq80/leveldb/ReadOptions;)Lorg/iq80/leveldb/DBIterator;
            //    10: astore          iterator
            //    12: aload_0         /* this */
            //    13: new             Lorg/apache/activemq/leveldb/LevelDBClient$RichDB$$anonfun$cursorKeysPrefixed$1;
            //    16: dup            
            //    17: aload_0         /* this */
            //    18: aload_1         /* prefix */
            //    19: aload           iterator
            //    21: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB$$anonfun$cursorKeysPrefixed$1.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient$RichDB;[BLorg/iq80/leveldb/DBIterator;)V
            //    24: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB.might_trigger_compaction:(Lscala/Function0;)Ljava/lang/Object;
            //    27: pop            
            //    28: aload           iterator
            //    30: invokeinterface org/iq80/leveldb/DBIterator.hasNext:()Z
            //    35: ifeq            79
            //    38: aload_0         /* this */
            //    39: getstatic       org/apache/activemq/leveldb/LevelDBClient$.MODULE$:Lorg/apache/activemq/leveldb/LevelDBClient$;
            //    42: aload           iterator
            //    44: invokeinterface org/iq80/leveldb/DBIterator.peekNext:()Ljava/util/Map$Entry;
            //    49: invokeinterface java/util/Map$Entry.getKey:()Ljava/lang/Object;
            //    54: checkcast       [B
            //    57: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$.toBuffer:([B)Lorg/fusesource/hawtbuf/Buffer;
            //    60: aload_1         /* prefix */
            //    61: aload_3         /* func */
            //    62: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB.check$1:(Lorg/fusesource/hawtbuf/Buffer;[BLscala/Function1;)Z
            //    65: ifeq            79
            //    68: aload           iterator
            //    70: invokeinterface org/iq80/leveldb/DBIterator.next:()Ljava/lang/Object;
            //    75: pop            
            //    76: goto            28
            //    79: aload           iterator
            //    81: invokeinterface org/iq80/leveldb/DBIterator.close:()V
            //    86: return         
            //    87: astore          5
            //    89: aload           4
            //    91: invokeinterface org/iq80/leveldb/DBIterator.close:()V
            //    96: aload           5
            //    98: athrow         
            //    Signature:
            //  ([BLorg/iq80/leveldb/ReadOptions;Lscala/Function1<[BLjava/lang/Object;>;)V
            //    StackMapTable: 00 03 FC 00 1C 07 00 AB 32 47 07 00 90
            //    Exceptions:
            //  Try           Handler
            //  Start  End    Start  End    Type
            //  -----  -----  -----  -----  ----
            //  28     79     87     99     Any
            // 
            // The error that occurred was:
            // 
            // java.lang.NullPointerException
            //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
            //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
            //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        public ReadOptions cursorKeysPrefixed$default$2() {
            return new ReadOptions();
        }
        
        public void cursorPrefixed(final byte[] prefix, final ReadOptions ro, final Function2<byte[], byte[], Object> func) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$RichDB.db:()Lorg/iq80/leveldb/DB;
            //     4: aload_2         /* ro */
            //     5: invokeinterface org/iq80/leveldb/DB.iterator:(Lorg/iq80/leveldb/ReadOptions;)Lorg/iq80/leveldb/DBIterator;
            //    10: astore          iterator
            //    12: aload_0         /* this */
            //    13: new             Lorg/apache/activemq/leveldb/LevelDBClient$RichDB$$anonfun$cursorPrefixed$1;
            //    16: dup            
            //    17: aload_0         /* this */
            //    18: aload_1         /* prefix */
            //    19: aload           iterator
            //    21: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB$$anonfun$cursorPrefixed$1.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient$RichDB;[BLorg/iq80/leveldb/DBIterator;)V
            //    24: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB.might_trigger_compaction:(Lscala/Function0;)Ljava/lang/Object;
            //    27: pop            
            //    28: aload           iterator
            //    30: invokeinterface org/iq80/leveldb/DBIterator.hasNext:()Z
            //    35: ifeq            81
            //    38: aload_0         /* this */
            //    39: getstatic       org/apache/activemq/leveldb/LevelDBClient$.MODULE$:Lorg/apache/activemq/leveldb/LevelDBClient$;
            //    42: aload           iterator
            //    44: invokeinterface org/iq80/leveldb/DBIterator.peekNext:()Ljava/util/Map$Entry;
            //    49: invokeinterface java/util/Map$Entry.getKey:()Ljava/lang/Object;
            //    54: checkcast       [B
            //    57: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$.toBuffer:([B)Lorg/fusesource/hawtbuf/Buffer;
            //    60: aload_1         /* prefix */
            //    61: aload_3         /* func */
            //    62: aload           iterator
            //    64: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB.check$2:(Lorg/fusesource/hawtbuf/Buffer;[BLscala/Function2;Lorg/iq80/leveldb/DBIterator;)Z
            //    67: ifeq            81
            //    70: aload           iterator
            //    72: invokeinterface org/iq80/leveldb/DBIterator.next:()Ljava/lang/Object;
            //    77: pop            
            //    78: goto            28
            //    81: aload           iterator
            //    83: invokeinterface org/iq80/leveldb/DBIterator.close:()V
            //    88: return         
            //    89: astore          5
            //    91: aload           4
            //    93: invokeinterface org/iq80/leveldb/DBIterator.close:()V
            //    98: aload           5
            //   100: athrow         
            //    Signature:
            //  ([BLorg/iq80/leveldb/ReadOptions;Lscala/Function2<[B[BLjava/lang/Object;>;)V
            //    StackMapTable: 00 03 FC 00 1C 07 00 AB 34 47 07 00 90
            //    Exceptions:
            //  Try           Handler
            //  Start  End    Start  End    Type
            //  -----  -----  -----  -----  ----
            //  28     81     89     101    Any
            // 
            // The error that occurred was:
            // 
            // java.lang.NullPointerException
            //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
            //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
            //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        public ReadOptions cursorPrefixed$default$2() {
            return new ReadOptions();
        }
        
        public int compare(final byte[] a1, final byte[] a2) {
            return new Buffer(a1).compareTo(new Buffer(a2));
        }
        
        public void cursorRangeKeys(final byte[] startIncluded, final byte[] endExcluded, final ReadOptions ro, final Function1<byte[], Object> func) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$RichDB.db:()Lorg/iq80/leveldb/DB;
            //     4: aload_3         /* ro */
            //     5: invokeinterface org/iq80/leveldb/DB.iterator:(Lorg/iq80/leveldb/ReadOptions;)Lorg/iq80/leveldb/DBIterator;
            //    10: astore          iterator
            //    12: aload_0         /* this */
            //    13: new             Lorg/apache/activemq/leveldb/LevelDBClient$RichDB$$anonfun$cursorRangeKeys$1;
            //    16: dup            
            //    17: aload_0         /* this */
            //    18: aload_1         /* startIncluded */
            //    19: aload           iterator
            //    21: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB$$anonfun$cursorRangeKeys$1.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient$RichDB;[BLorg/iq80/leveldb/DBIterator;)V
            //    24: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB.might_trigger_compaction:(Lscala/Function0;)Ljava/lang/Object;
            //    27: pop            
            //    28: aload           iterator
            //    30: invokeinterface org/iq80/leveldb/DBIterator.hasNext:()Z
            //    35: ifeq            74
            //    38: aload_0         /* this */
            //    39: aload           iterator
            //    41: invokeinterface org/iq80/leveldb/DBIterator.peekNext:()Ljava/util/Map$Entry;
            //    46: invokeinterface java/util/Map$Entry.getKey:()Ljava/lang/Object;
            //    51: checkcast       [B
            //    54: aload_2         /* endExcluded */
            //    55: aload           func
            //    57: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB.check$3:([B[BLscala/Function1;)Z
            //    60: ifeq            74
            //    63: aload           iterator
            //    65: invokeinterface org/iq80/leveldb/DBIterator.next:()Ljava/lang/Object;
            //    70: pop            
            //    71: goto            28
            //    74: aload           iterator
            //    76: invokeinterface org/iq80/leveldb/DBIterator.close:()V
            //    81: return         
            //    82: astore          6
            //    84: aload           5
            //    86: invokeinterface org/iq80/leveldb/DBIterator.close:()V
            //    91: aload           6
            //    93: athrow         
            //    Signature:
            //  ([B[BLorg/iq80/leveldb/ReadOptions;Lscala/Function1<[BLjava/lang/Object;>;)V
            //    StackMapTable: 00 03 FC 00 1C 07 00 AB 2D 47 07 00 90
            //    Exceptions:
            //  Try           Handler
            //  Start  End    Start  End    Type
            //  -----  -----  -----  -----  ----
            //  28     74     82     94     Any
            // 
            // The error that occurred was:
            // 
            // java.lang.NullPointerException
            //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
            //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
            //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        public void cursorRange(final byte[] startIncluded, final byte[] endExcluded, final ReadOptions ro, final Function2<byte[], byte[], Object> func) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$RichDB.db:()Lorg/iq80/leveldb/DB;
            //     4: aload_3         /* ro */
            //     5: invokeinterface org/iq80/leveldb/DB.iterator:(Lorg/iq80/leveldb/ReadOptions;)Lorg/iq80/leveldb/DBIterator;
            //    10: astore          iterator
            //    12: aload_0         /* this */
            //    13: new             Lorg/apache/activemq/leveldb/LevelDBClient$RichDB$$anonfun$cursorRange$1;
            //    16: dup            
            //    17: aload_0         /* this */
            //    18: aload_1         /* startIncluded */
            //    19: aload           iterator
            //    21: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB$$anonfun$cursorRange$1.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient$RichDB;[BLorg/iq80/leveldb/DBIterator;)V
            //    24: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB.might_trigger_compaction:(Lscala/Function0;)Ljava/lang/Object;
            //    27: pop            
            //    28: aload           iterator
            //    30: invokeinterface org/iq80/leveldb/DBIterator.hasNext:()Z
            //    35: ifeq            76
            //    38: aload_0         /* this */
            //    39: aload           iterator
            //    41: invokeinterface org/iq80/leveldb/DBIterator.peekNext:()Ljava/util/Map$Entry;
            //    46: invokeinterface java/util/Map$Entry.getKey:()Ljava/lang/Object;
            //    51: checkcast       [B
            //    54: aload_2         /* endExcluded */
            //    55: aload           func
            //    57: aload           iterator
            //    59: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB.check$4:([B[BLscala/Function2;Lorg/iq80/leveldb/DBIterator;)Z
            //    62: ifeq            76
            //    65: aload           iterator
            //    67: invokeinterface org/iq80/leveldb/DBIterator.next:()Ljava/lang/Object;
            //    72: pop            
            //    73: goto            28
            //    76: aload           iterator
            //    78: invokeinterface org/iq80/leveldb/DBIterator.close:()V
            //    83: return         
            //    84: astore          6
            //    86: aload           5
            //    88: invokeinterface org/iq80/leveldb/DBIterator.close:()V
            //    93: aload           6
            //    95: athrow         
            //    Signature:
            //  ([B[BLorg/iq80/leveldb/ReadOptions;Lscala/Function2<[B[BLjava/lang/Object;>;)V
            //    StackMapTable: 00 03 FC 00 1C 07 00 AB 2F 47 07 00 90
            //    Exceptions:
            //  Try           Handler
            //  Start  End    Start  End    Type
            //  -----  -----  -----  -----  ----
            //  28     76     84     96     Any
            // 
            // The error that occurred was:
            // 
            // java.lang.NullPointerException
            //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
            //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
            //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        public ReadOptions cursorRange$default$3() {
            return new ReadOptions();
        }
        
        public ReadOptions cursorRangeKeys$default$3() {
            return new ReadOptions();
        }
        
        public Option<byte[]> lastKey(final byte[] prefix, final ReadOptions ro) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     3: dup            
            //     4: aload_1         /* prefix */
            //     5: invokespecial   org/fusesource/hawtbuf/Buffer.<init>:([B)V
            //     8: invokevirtual   org/fusesource/hawtbuf/Buffer.deepCopy:()Lorg/fusesource/hawtbuf/Buffer;
            //    11: getfield        org/fusesource/hawtbuf/Buffer.data:[B
            //    14: astore_3        /* last */
            //    15: aload_3         /* last */
            //    16: arraylength    
            //    17: iconst_0       
            //    18: if_icmple       38
            //    21: aload_3         /* last */
            //    22: arraylength    
            //    23: iconst_1       
            //    24: isub           
            //    25: istore          pos
            //    27: aload_3         /* last */
            //    28: iload           pos
            //    30: aload_3         /* last */
            //    31: iload           pos
            //    33: baload         
            //    34: iconst_1       
            //    35: iadd           
            //    36: i2b            
            //    37: bastore        
            //    38: aload_0         /* this */
            //    39: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$RichDB.isPureJavaVersion:()Z
            //    42: ifeq            84
            //    45: getstatic       scala/None$.MODULE$:Lscala/None$;
            //    48: invokestatic    scala/runtime/ObjectRef.create:(Ljava/lang/Object;)Lscala/runtime/ObjectRef;
            //    51: astore          rc
            //    53: aload_0         /* this */
            //    54: aload_1         /* prefix */
            //    55: aload_3         /* last */
            //    56: aload_0         /* this */
            //    57: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$RichDB.cursorRangeKeys$default$3:()Lorg/iq80/leveldb/ReadOptions;
            //    60: new             Lorg/apache/activemq/leveldb/LevelDBClient$RichDB$$anonfun$lastKey$2;
            //    63: dup            
            //    64: aload_0         /* this */
            //    65: aload           rc
            //    67: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB$$anonfun$lastKey$2.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient$RichDB;Lscala/runtime/ObjectRef;)V
            //    70: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$RichDB.cursorRangeKeys:([B[BLorg/iq80/leveldb/ReadOptions;Lscala/Function1;)V
            //    73: aload           rc
            //    75: getfield        scala/runtime/ObjectRef.elem:Ljava/lang/Object;
            //    78: checkcast       Lscala/Option;
            //    81: goto            225
            //    84: aload_0         /* this */
            //    85: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$RichDB.db:()Lorg/iq80/leveldb/DB;
            //    88: aload_2         /* ro */
            //    89: invokeinterface org/iq80/leveldb/DB.iterator:(Lorg/iq80/leveldb/ReadOptions;)Lorg/iq80/leveldb/DBIterator;
            //    94: astore          iterator
            //    96: aload_0         /* this */
            //    97: new             Lorg/apache/activemq/leveldb/LevelDBClient$RichDB$$anonfun$lastKey$1;
            //   100: dup            
            //   101: aload_0         /* this */
            //   102: aload_3         /* last */
            //   103: aload           iterator
            //   105: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB$$anonfun$lastKey$1.<init>:(Lorg/apache/activemq/leveldb/LevelDBClient$RichDB;[BLorg/iq80/leveldb/DBIterator;)V
            //   108: invokespecial   org/apache/activemq/leveldb/LevelDBClient$RichDB.might_trigger_compaction:(Lscala/Function0;)Ljava/lang/Object;
            //   111: pop            
            //   112: aload           iterator
            //   114: invokeinterface org/iq80/leveldb/DBIterator.hasPrev:()Z
            //   119: ifeq            132
            //   122: aload           iterator
            //   124: invokeinterface org/iq80/leveldb/DBIterator.prev:()Ljava/util/Map$Entry;
            //   129: goto            142
            //   132: aload           iterator
            //   134: invokeinterface org/iq80/leveldb/DBIterator.seekToLast:()V
            //   139: getstatic       scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
            //   142: pop            
            //   143: aload           iterator
            //   145: invokeinterface org/iq80/leveldb/DBIterator.hasNext:()Z
            //   150: ifeq            215
            //   153: getstatic       org/apache/activemq/leveldb/LevelDBClient$.MODULE$:Lorg/apache/activemq/leveldb/LevelDBClient$;
            //   156: aload           iterator
            //   158: invokeinterface org/iq80/leveldb/DBIterator.peekNext:()Ljava/util/Map$Entry;
            //   163: invokeinterface java/util/Map$Entry.getKey:()Ljava/lang/Object;
            //   168: checkcast       [B
            //   171: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$.toBuffer:([B)Lorg/fusesource/hawtbuf/Buffer;
            //   174: astore          key
            //   176: aload           key
            //   178: getstatic       org/apache/activemq/leveldb/LevelDBClient$.MODULE$:Lorg/apache/activemq/leveldb/LevelDBClient$;
            //   181: aload_1         /* prefix */
            //   182: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$.toBuffer:([B)Lorg/fusesource/hawtbuf/Buffer;
            //   185: invokevirtual   org/fusesource/hawtbuf/Buffer.startsWith:(Lorg/fusesource/hawtbuf/Buffer;)Z
            //   188: ifeq            209
            //   191: new             Lscala/Some;
            //   194: dup            
            //   195: getstatic       org/apache/activemq/leveldb/LevelDBClient$.MODULE$:Lorg/apache/activemq/leveldb/LevelDBClient$;
            //   198: aload           key
            //   200: invokevirtual   org/apache/activemq/leveldb/LevelDBClient$.toByteArray:(Lorg/fusesource/hawtbuf/Buffer;)[B
            //   203: invokespecial   scala/Some.<init>:(Ljava/lang/Object;)V
            //   206: goto            218
            //   209: getstatic       scala/None$.MODULE$:Lscala/None$;
            //   212: goto            218
            //   215: getstatic       scala/None$.MODULE$:Lscala/None$;
            //   218: aload           iterator
            //   220: invokeinterface org/iq80/leveldb/DBIterator.close:()V
            //   225: areturn        
            //   226: astore          7
            //   228: aload           6
            //   230: invokeinterface org/iq80/leveldb/DBIterator.close:()V
            //   235: aload           7
            //   237: athrow         
            //    Signature:
            //  ([BLorg/iq80/leveldb/ReadOptions;)Lscala/Option<[B>;
            //    StackMapTable: 00 09 FC 00 26 07 00 D6 2D FE 00 2F 00 00 07 00 AB 49 07 00 04 FD 00 42 00 07 00 EF F9 00 05 42 07 01 32 FF 00 06 00 04 07 00 02 07 00 D6 07 00 4C 07 00 D6 00 01 07 01 32 FF 00 00 00 07 07 00 02 07 00 D6 07 00 4C 07 00 D6 00 00 07 00 AB 00 01 07 00 90
            //    Exceptions:
            //  Try           Handler
            //  Start  End    Start  End    Type
            //  -----  -----  -----  -----  ----
            //  96     218    226    238    Any
            // 
            // The error that occurred was:
            // 
            // java.lang.NullPointerException
            //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
            //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
            //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        public ReadOptions lastKey$default$2() {
            return new ReadOptions();
        }
        
        public void compact() {
            this.compact_needed_$eq(false);
            final DB db = this.db();
            if (db instanceof JniDB) {
                ((JniDB)db).compactRange((byte[])null, (byte[])null);
                final BoxedUnit unit = BoxedUnit.UNIT;
            }
            else {
                final BoxedUnit unit2 = BoxedUnit.UNIT;
            }
        }
        
        private <T> T might_trigger_compaction(final Function0<T> func) {
            final long start = System.nanoTime();
            try {
                return (T)func.apply();
            }
            finally {
                final long duration = System.nanoTime() - start;
                if (duration > 100000000L) {
                    this.compact_needed_$eq(true);
                }
            }
        }
        
        public boolean compact_needed() {
            return this.compact_needed;
        }
        
        public void compact_needed_$eq(final boolean x$1) {
            this.compact_needed = x$1;
        }
        
        private final boolean check$1(final Buffer key, final byte[] prefix$2, final Function1 func$3) {
            return key.startsWith(LevelDBClient$.MODULE$.toBuffer(prefix$2)) && BoxesRunTime.unboxToBoolean(func$3.apply((Object)LevelDBClient$.MODULE$.toByteArray(key)));
        }
        
        private final boolean check$2(final Buffer key, final byte[] prefix$1, final Function2 func$1, final DBIterator iterator$2) {
            return key.startsWith(LevelDBClient$.MODULE$.toBuffer(prefix$1)) && BoxesRunTime.unboxToBoolean(func$1.apply((Object)LevelDBClient$.MODULE$.toByteArray(key), iterator$2.peekNext().getValue()));
        }
        
        private final boolean check$3(final byte[] key, final byte[] endExcluded$2, final Function1 func$8) {
            return this.compare(key, endExcluded$2) < 0 && BoxesRunTime.unboxToBoolean(func$8.apply((Object)key));
        }
        
        private final boolean check$4(final byte[] key, final byte[] endExcluded$1, final Function2 func$6, final DBIterator iterator$4) {
            return this.compare(key, endExcluded$1) < 0 && BoxesRunTime.unboxToBoolean(func$6.apply((Object)key, iterator$4.peekNext().getValue()));
        }
        
        public RichDB(final DB db) {
            this.db = db;
            final String name = db.getClass().getName();
            final String obj = "org.iq80.leveldb.impl.DbImpl";
            boolean isPureJavaVersion = false;
            Label_0045: {
                Label_0044: {
                    if (name == null) {
                        if (obj != null) {
                            break Label_0044;
                        }
                    }
                    else if (!name.equals(obj)) {
                        break Label_0044;
                    }
                    isPureJavaVersion = true;
                    break Label_0045;
                }
                isPureJavaVersion = false;
            }
            this.isPureJavaVersion = isPureJavaVersion;
            this.compact_needed = false;
        }
    }
    
    public static class CollectionMeta implements Serializable
    {
        private long size;
        private byte[] last_key;
        
        public long size() {
            return this.size;
        }
        
        public void size_$eq(final long x$1) {
            this.size = x$1;
        }
        
        public byte[] last_key() {
            return this.last_key;
        }
        
        public void last_key_$eq(final byte[] x$1) {
            this.last_key = x$1;
        }
        
        public CollectionMeta() {
            this.size = 0L;
        }
    }
}
